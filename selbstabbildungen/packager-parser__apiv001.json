{
  "schemaVersion": 1,
  "distribution": "",
  "package": "packager-parser",
  "version": "",
  "modules": [
    {
      "id": "packager-parser/package_parser",
      "name": "package_parser",
      "imports": [],
      "from_imports": [],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.__main__",
      "name": "package_parser.__main__",
      "imports": [],
      "from_imports": [
        {
          "module": "package_parser.main",
          "declaration": "main",
          "alias": null
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.cli",
      "name": "package_parser.cli",
      "imports": [
        {
          "module": "argparse",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "argparse",
          "declaration": "_SubParsersAction",
          "alias": null
        },
        {
          "module": "pathlib",
          "declaration": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Any",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages",
          "declaration": "find_usages",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "distribution",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "distribution_version",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "get_api",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_dependencies",
          "declaration": "get_dependencies",
          "alias": null
        },
        {
          "module": "package_parser.commands.suggest_improvements",
          "declaration": "suggest_improvements",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "ensure_file_exists",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.cli/CustomEncoder"
      ],
      "functions": [
        "packager-parser/package_parser.cli/cli",
        "packager-parser/package_parser.cli/__get_args",
        "packager-parser/package_parser.cli/__add_api_subparser",
        "packager-parser/package_parser.cli/__add_usages_subparser",
        "packager-parser/package_parser.cli/__add_improve_subparser"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands",
      "name": "package_parser.commands",
      "imports": [],
      "from_imports": [],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages",
      "name": "package_parser.commands.find_usages",
      "imports": [],
      "from_imports": [
        {
          "module": "package_parser.commands.find_usages._find_usages",
          "declaration": "find_usages",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "ClassUsage",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "FunctionUsage",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "ParameterUsage",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "Usage",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "UsageStore",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "ValueUsage",
          "alias": null
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor",
      "name": "package_parser.commands.find_usages._ast_visitor",
      "imports": [
        {
          "module": "astroid",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "astroid.arguments",
          "declaration": "CallSite",
          "alias": null
        },
        {
          "module": "astroid.helpers",
          "declaration": "safe_infer",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "Location",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "UsageStore",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder"
      ],
      "functions": [
        "packager-parser/package_parser.commands.find_usages._ast_visitor/_analyze_declaration_called_by",
        "packager-parser/package_parser.commands.find_usages._ast_visitor/__is_relevant_qualified_name",
        "packager-parser/package_parser.commands.find_usages._ast_visitor/__n_implicit_parameters",
        "packager-parser/package_parser.commands.find_usages._ast_visitor/__called_constructor",
        "packager-parser/package_parser.commands.find_usages._ast_visitor/_stringify_value",
        "packager-parser/package_parser.commands.find_usages._ast_visitor/_bound_parameters"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._find_usages",
      "name": "package_parser.commands.find_usages._find_usages",
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "multiprocessing",
          "alias": null
        },
        {
          "module": "astroid",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "multiprocessing",
          "declaration": "synchronize",
          "alias": null
        },
        {
          "module": "pathlib",
          "declaration": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "ASTWalker",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "initialize_and_read_exclude_file",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "list_files",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._ast_visitor",
          "declaration": "_UsageFinder",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages._model",
          "declaration": "UsageStore",
          "alias": null
        }
      ],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.commands.find_usages._find_usages/find_usages",
        "packager-parser/package_parser.commands.find_usages._find_usages/__initialize_process_environment",
        "packager-parser/package_parser.commands.find_usages._find_usages/__find_usages_in_single_file",
        "packager-parser/package_parser.commands.find_usages._find_usages/__is_relevant_python_file",
        "packager-parser/package_parser.commands.find_usages._find_usages/_merge_results"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model",
      "name": "package_parser.commands.find_usages._model",
      "imports": [],
      "from_imports": [
        {
          "module": "__future__",
          "declaration": "annotations",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.commands.find_usages._model/UsageStore",
        "packager-parser/package_parser.commands.find_usages._model/Usage",
        "packager-parser/package_parser.commands.find_usages._model/ClassUsage",
        "packager-parser/package_parser.commands.find_usages._model/FunctionUsage",
        "packager-parser/package_parser.commands.find_usages._model/ParameterUsage",
        "packager-parser/package_parser.commands.find_usages._model/ValueUsage",
        "packager-parser/package_parser.commands.find_usages._model/Location"
      ],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api",
      "name": "package_parser.commands.get_api",
      "imports": [],
      "from_imports": [
        {
          "module": "package_parser.commands.get_api._get_api",
          "declaration": "get_api",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "API",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Action",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "APIDependencies",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Class",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Condition",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Dependency",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "FromImport",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Function",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Import",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Module",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Parameter",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterAndResultDocstring",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterAssignment",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterHasValue",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterIsIgnored",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterIsIllegal",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterIsNone",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Result",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "distribution",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "distribution_version",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "package_files",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "package_root",
          "alias": null
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor",
      "name": "package_parser.commands.get_api._ast_visitor",
      "imports": [
        {
          "module": "inspect",
          "alias": null
        },
        {
          "module": "astroid",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Union",
          "alias": null
        },
        {
          "module": "numpydoc.docscrape",
          "declaration": "NumpyDocString",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "parent_qname",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._file_filters",
          "declaration": "_is_init_file",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "API",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Class",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "FromImport",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Function",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Import",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Module",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "Parameter",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterAndResultDocstring",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "ParameterAssignment",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor"
      ],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._file_filters",
      "name": "package_parser.commands.get_api._file_filters",
      "imports": [],
      "from_imports": [],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.commands.get_api._file_filters/_is_init_file",
        "packager-parser/package_parser.commands.get_api._file_filters/_is_test_file"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._get_api",
      "name": "package_parser.commands.get_api._get_api",
      "imports": [
        {
          "module": "astroid",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "declaration": "Path",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "ASTWalker",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._ast_visitor",
          "declaration": "_AstVisitor",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._file_filters",
          "declaration": "_is_test_file",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._model",
          "declaration": "API",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "distribution",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "distribution_version",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "package_files",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._package_metadata",
          "declaration": "package_root",
          "alias": null
        }
      ],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.commands.get_api._get_api/get_api",
        "packager-parser/package_parser.commands.get_api._get_api/__module_name"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model",
      "name": "package_parser.commands.get_api._model",
      "imports": [
        {
          "module": "inspect",
          "alias": null
        },
        {
          "module": "re",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "__future__",
          "declaration": "annotations",
          "alias": null
        },
        {
          "module": "dataclasses",
          "declaration": "asdict",
          "alias": null
        },
        {
          "module": "dataclasses",
          "declaration": "dataclass",
          "alias": null
        },
        {
          "module": "enum",
          "declaration": "Enum",
          "alias": null
        },
        {
          "module": "enum",
          "declaration": "auto",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Union",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._refined_types",
          "declaration": "BoundaryType",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._refined_types",
          "declaration": "EnumType",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._refined_types",
          "declaration": "NamedType",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._refined_types",
          "declaration": "UnionType",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "declaration_qname_to_name",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "parent_qname",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.commands.get_api._model/API",
        "packager-parser/package_parser.commands.get_api._model/Module",
        "packager-parser/package_parser.commands.get_api._model/Import",
        "packager-parser/package_parser.commands.get_api._model/FromImport",
        "packager-parser/package_parser.commands.get_api._model/Class",
        "packager-parser/package_parser.commands.get_api._model/Function",
        "packager-parser/package_parser.commands.get_api._model/RefinedType",
        "packager-parser/package_parser.commands.get_api._model/Parameter",
        "packager-parser/package_parser.commands.get_api._model/ParameterAssignment",
        "packager-parser/package_parser.commands.get_api._model/Result",
        "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring",
        "packager-parser/package_parser.commands.get_api._model/Action",
        "packager-parser/package_parser.commands.get_api._model/RuntimeAction",
        "packager-parser/package_parser.commands.get_api._model/StaticAction",
        "packager-parser/package_parser.commands.get_api._model/ParameterIsIgnored",
        "packager-parser/package_parser.commands.get_api._model/ParameterIsIllegal",
        "packager-parser/package_parser.commands.get_api._model/Condition",
        "packager-parser/package_parser.commands.get_api._model/RuntimeCondition",
        "packager-parser/package_parser.commands.get_api._model/StaticCondition",
        "packager-parser/package_parser.commands.get_api._model/ParameterHasValue",
        "packager-parser/package_parser.commands.get_api._model/ParameterIsNone",
        "packager-parser/package_parser.commands.get_api._model/Dependency",
        "packager-parser/package_parser.commands.get_api._model/APIDependencies"
      ],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._package_metadata",
      "name": "package_parser.commands.get_api._package_metadata",
      "imports": [
        {
          "module": "importlib",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "declaration": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "importlib_metadata",
          "declaration": "packages_distributions",
          "alias": null
        },
        {
          "module": "importlib_metadata",
          "declaration": "version",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "list_files",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api._file_filters",
          "declaration": "_is_init_file",
          "alias": null
        }
      ],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.commands.get_api._package_metadata/package_files",
        "packager-parser/package_parser.commands.get_api._package_metadata/package_root",
        "packager-parser/package_parser.commands.get_api._package_metadata/__move_init_files_to_front",
        "packager-parser/package_parser.commands.get_api._package_metadata/distribution",
        "packager-parser/package_parser.commands.get_api._package_metadata/distribution_version"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types",
      "name": "package_parser.commands.get_api._refined_types",
      "imports": [
        {
          "module": "re",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "__future__",
          "declaration": "annotations",
          "alias": null
        },
        {
          "module": "dataclasses",
          "declaration": "dataclass",
          "alias": null
        },
        {
          "module": "dataclasses",
          "declaration": "field",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "ClassVar",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Union",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.commands.get_api._refined_types/NamedType",
        "packager-parser/package_parser.commands.get_api._refined_types/EnumType",
        "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType",
        "packager-parser/package_parser.commands.get_api._refined_types/UnionType"
      ],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies",
      "name": "package_parser.commands.get_dependencies",
      "imports": [],
      "from_imports": [
        {
          "module": "package_parser.commands.get_dependencies._get_dependency",
          "declaration": "get_dependencies",
          "alias": null
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._dependency_patterns",
      "name": "package_parser.commands.get_dependencies._dependency_patterns",
      "imports": [],
      "from_imports": [],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency",
      "name": "package_parser.commands.get_dependencies._get_dependency",
      "imports": [
        {
          "module": "spacy",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "typing",
          "declaration": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "List",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Tuple",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Union",
          "alias": null
        },
        {
          "module": "spacy.matcher",
          "declaration": "DependencyMatcher",
          "alias": null
        },
        {
          "module": "spacy.tokens",
          "declaration": "Token",
          "alias": null
        },
        {
          "module": "spacy.tokens.doc",
          "declaration": "Doc",
          "alias": null
        },
        {
          "module": "spacy.tokens.span",
          "declaration": "Span",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "API",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "Action",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "APIDependencies",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "Condition",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "Dependency",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "Parameter",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "ParameterHasValue",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "ParameterIsIgnored",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "ParameterIsIllegal",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "ParameterIsNone",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_dependencies._dependency_patterns",
          "declaration": "dependency_matcher_patterns",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_dependencies._preprocess_docstring",
          "declaration": "preprocess_docstring",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor"
      ],
      "functions": [
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_lefts_and_rights",
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_action",
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_condition",
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring",
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/get_dependencies"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._ground_truth",
      "name": "package_parser.commands.get_dependencies._ground_truth",
      "imports": [],
      "from_imports": [],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._preprocess_docstring",
      "name": "package_parser.commands.get_dependencies._preprocess_docstring",
      "imports": [
        {
          "module": "re",
          "alias": null
        }
      ],
      "from_imports": [],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.commands.get_dependencies._preprocess_docstring/preprocess_docstring"
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements",
      "name": "package_parser.commands.suggest_improvements",
      "imports": [],
      "from_imports": [
        {
          "module": "package_parser.commands.suggest_improvements._suggest_improvements",
          "declaration": "suggest_improvements",
          "alias": null
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements",
      "name": "package_parser.commands.suggest_improvements._suggest_improvements",
      "imports": [
        {
          "module": "json",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "io",
          "declaration": "TextIOWrapper",
          "alias": null
        },
        {
          "module": "pathlib",
          "declaration": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Union",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages",
          "declaration": "ClassUsage",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages",
          "declaration": "FunctionUsage",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages",
          "declaration": "UsageStore",
          "alias": null
        },
        {
          "module": "package_parser.commands.find_usages",
          "declaration": "ValueUsage",
          "alias": null
        },
        {
          "module": "package_parser.commands.get_api",
          "declaration": "API",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "ensure_file_exists",
          "alias": null
        },
        {
          "module": "package_parser.utils",
          "declaration": "parent_qname",
          "alias": null
        }
      ],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/suggest_improvements",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__preprocess_usages",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__print_usage_counts",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_usage_distributions",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_class_or_function_usage_distribution",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_parameter_usage_distribution",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_internal_usages",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_unused_api_elements",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_implicit_usages_of_default_value",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__n_not_set_to_most_common_value",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_api_elements",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_classes",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_functions",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_parameters",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_mostly_useless_parameters",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__write_api_size",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__api_size_to_json",
        "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__optional_vs_required_parameters"
      ]
    },
    {
      "id": "packager-parser/package_parser.main",
      "name": "package_parser.main",
      "imports": [
        {
          "module": "time",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "package_parser.cli",
          "declaration": "cli",
          "alias": null
        }
      ],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.main/main"
      ]
    },
    {
      "id": "packager-parser/package_parser.utils",
      "name": "package_parser.utils",
      "imports": [],
      "from_imports": [
        {
          "module": "package_parser.utils._ASTWalker",
          "declaration": "ASTWalker",
          "alias": null
        },
        {
          "module": "package_parser.utils._files",
          "declaration": "ensure_file_exists",
          "alias": null
        },
        {
          "module": "package_parser.utils._files",
          "declaration": "initialize_and_read_exclude_file",
          "alias": null
        },
        {
          "module": "package_parser.utils._files",
          "declaration": "list_files",
          "alias": null
        },
        {
          "module": "package_parser.utils._qnames",
          "declaration": "declaration_qname_to_name",
          "alias": null
        },
        {
          "module": "package_parser.utils._qnames",
          "declaration": "parent_qname",
          "alias": null
        }
      ],
      "classes": [],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker",
      "name": "package_parser.utils._ASTWalker",
      "imports": [
        {
          "module": "astroid",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "typing",
          "declaration": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Callable",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "Type",
          "alias": null
        }
      ],
      "classes": [
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker"
      ],
      "functions": []
    },
    {
      "id": "packager-parser/package_parser.utils._files",
      "name": "package_parser.utils._files",
      "imports": [
        {
          "module": "os",
          "alias": null
        }
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "declaration": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "declaration": "TextIO",
          "alias": null
        }
      ],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.utils._files/list_files",
        "packager-parser/package_parser.utils._files/ensure_file_exists",
        "packager-parser/package_parser.utils._files/initialize_and_read_exclude_file",
        "packager-parser/package_parser.utils._files/__read_lines",
        "packager-parser/package_parser.utils._files/__write_lines"
      ]
    },
    {
      "id": "packager-parser/package_parser.utils._qnames",
      "name": "package_parser.utils._qnames",
      "imports": [],
      "from_imports": [],
      "classes": [],
      "functions": [
        "packager-parser/package_parser.utils._qnames/declaration_qname_to_name",
        "packager-parser/package_parser.utils._qnames/parent_qname"
      ]
    }
  ],
  "classes": [
    {
      "id": "packager-parser/package_parser.cli/CustomEncoder",
      "name": "CustomEncoder",
      "qname": "package_parser.cli.CustomEncoder",
      "decorators": [],
      "superclasses": [
        "json.JSONEncoder"
      ],
      "methods": [
        "packager-parser/package_parser.cli/CustomEncoder/default"
      ],
      "is_public": true,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class CustomEncoder(json.JSONEncoder):\n    def default(self, o: Any) -> Any:\n        if isinstance(o, set):\n            return list(o)\n        return super().default(o)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder",
      "name": "_UsageFinder",
      "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/__init__",
        "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/enter_call"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class _UsageFinder:\n    def __init__(self, package_name: str, python_file: str) -> None:\n        self.package_name: str = package_name\n        self.python_file: str = python_file\n        self.usages: UsageStore = UsageStore()\n\n    def enter_call(self, node: astroid.Call):\n        called_tuple = _analyze_declaration_called_by(node, self.package_name)\n        if called_tuple is None:\n            return\n        called, function_qname, parameters, n_implicit_parameters = called_tuple\n\n        bound_parameters = _bound_parameters(\n            parameters, CallSite.from_call(node), n_implicit_parameters\n        )\n        if bound_parameters is None:\n            return\n\n        location = Location(self.python_file, node.lineno, node.col_offset)\n\n        # Add class usage\n        if (\n            isinstance(called, (astroid.BoundMethod, astroid.UnboundMethod))\n            or isinstance(called, astroid.FunctionDef)\n            and called.is_method()\n        ):\n            self.usages.add_class_usage(\n                \".\".join(function_qname.split(\".\")[:-1]), location\n            )\n\n        # Add function usage\n        self.usages.add_function_usage(function_qname, location)\n\n        # Add parameter & value usage\n        for parameter_name, value in bound_parameters.items():\n            parameter_qname = f\"{function_qname}.{parameter_name}\"\n            self.usages.add_parameter_usage(parameter_qname, location)\n\n            value = _stringify_value(value)\n            self.usages.add_value_usage(parameter_qname, value, location)",
      "instance_attributes": [
        {
          "name": "package_name",
          "types": null
        },
        {
          "name": "python_file",
          "types": null
        },
        {
          "name": "usages",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage",
      "name": "ClassUsage",
      "qname": "package_parser.commands.find_usages._model.ClassUsage",
      "decorators": [],
      "superclasses": [
        "Usage"
      ],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._model/ClassUsage/__init__",
        "packager-parser/package_parser.commands.find_usages._model/ClassUsage/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ClassUsage(Usage):\n    def __init__(self, qname: ClassQName, location: Location) -> None:\n        self.qname: ClassQName = qname\n        self.location: Location = location\n\n    def to_json(self) -> Any:\n        return {\"qname\": self.qname, \"location\": self.location.to_json()}",
      "instance_attributes": [
        {
          "name": "qname",
          "types": null
        },
        {
          "name": "location",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage",
      "name": "FunctionUsage",
      "qname": "package_parser.commands.find_usages._model.FunctionUsage",
      "decorators": [],
      "superclasses": [
        "Usage"
      ],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/__init__",
        "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class FunctionUsage(Usage):\n    def __init__(self, qname: FunctionQName, location: Location) -> None:\n        self.qname: FunctionQName = qname\n        self.location: Location = location\n\n    def to_json(self) -> Any:\n        return {\"qname\": self.qname, \"location\": self.location.to_json()}",
      "instance_attributes": [
        {
          "name": "qname",
          "types": null
        },
        {
          "name": "location",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location",
      "name": "Location",
      "qname": "package_parser.commands.find_usages._model.Location",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._model/Location/from_json",
        "packager-parser/package_parser.commands.find_usages._model/Location/__init__",
        "packager-parser/package_parser.commands.find_usages._model/Location/__repr__",
        "packager-parser/package_parser.commands.find_usages._model/Location/__eq__",
        "packager-parser/package_parser.commands.find_usages._model/Location/__hash__",
        "packager-parser/package_parser.commands.find_usages._model/Location/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Location:\n    @staticmethod\n    def from_json(json: Any) -> Location:\n        return Location(json[\"file\"], json[\"line\"], json[\"column\"])\n\n    def __init__(\n        self, file: FileName, line: Optional[LineNumber], column: Optional[ColumnNumber]\n    ) -> None:\n        self.file: FileName = file\n        self.line: Optional[LineNumber] = line\n        self.column: Optional[ColumnNumber] = column\n\n    def __repr__(self) -> str:\n        return f\"{self.file}@{self.line}:{self.column}\"\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, type(self)):\n            return NotImplemented\n        return (\n            self.file == other.file\n            and self.line == other.line\n            and self.column == other.column\n        )\n\n    def __hash__(self) -> int:\n        return hash((self.file, self.line, self.column))\n\n    def to_json(self) -> Any:\n        return {\"file\": self.file, \"line\": self.line, \"column\": self.column}",
      "instance_attributes": [
        {
          "name": "file",
          "types": null
        },
        {
          "name": "line",
          "types": null
        },
        {
          "name": "column",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage",
      "name": "ParameterUsage",
      "qname": "package_parser.commands.find_usages._model.ParameterUsage",
      "decorators": [],
      "superclasses": [
        "Usage"
      ],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/__init__",
        "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterUsage(Usage):\n    def __init__(self, qname: ParameterQName, location: Location) -> None:\n        self.qname: ParameterQName = qname\n        self.location: Location = location\n\n    def to_json(self) -> Any:\n        return {\"qname\": self.qname, \"location\": self.location.to_json()}",
      "instance_attributes": [
        {
          "name": "qname",
          "types": null
        },
        {
          "name": "location",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Usage",
      "name": "Usage",
      "qname": "package_parser.commands.find_usages._model.Usage",
      "decorators": [],
      "superclasses": [],
      "methods": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Usage:\n    pass",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore",
      "name": "UsageStore",
      "qname": "package_parser.commands.find_usages._model.UsageStore",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/from_json",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/__init__",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_class_usage",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_class",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_class",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_function_usage",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_function",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_function",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_parameter_usage",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_parameter",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_parameter",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_value_usage",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_value",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_value",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_class_usages",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_function_usages",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_parameter_usages",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_value_usages",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/most_common_value",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/merge_other_into_self",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/to_json",
        "packager-parser/package_parser.commands.find_usages._model/UsageStore/to_count_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class UsageStore:\n    @staticmethod\n    def from_json(json: Any) -> UsageStore:\n        result = UsageStore()\n\n        # Revive class usages\n        class_usages = json[\"class_usages\"]\n        for qname, locations in class_usages.items():\n            for location in locations:\n                result.add_class_usage(qname, Location.from_json(location))\n\n        # Revive function usages\n        function_usages = json[\"function_usages\"]\n        for qname, locations in function_usages.items():\n            for location in locations:\n                result.add_function_usage(qname, Location.from_json(location))\n\n        # Revive parameter usages\n        parameter_usages = json[\"parameter_usages\"]\n        for qname, locations in parameter_usages.items():\n            for location in locations:\n                result.add_parameter_usage(qname, Location.from_json(location))\n\n        # Revive value usages\n        value_usages = json[\"value_usages\"]\n        for parameter_qname, values in value_usages.items():\n            for value, locations in values.items():\n                for location in locations:\n                    result.add_value_usage(\n                        parameter_qname, value, Location.from_json(location)\n                    )\n\n        return result\n\n    def __init__(self) -> None:\n        self.class_usages: dict[ClassQName, list[ClassUsage]] = {}\n        self.function_usages: dict[FunctionQName, list[FunctionUsage]] = {}\n        self.parameter_usages: dict[ParameterQName, list[ParameterUsage]] = {}\n        self.value_usages: dict[\n            ParameterQName, dict[StringifiedValue, list[ValueUsage]]\n        ] = {}\n\n    def add_class_usage(self, qname: ClassQName, location: Location) -> None:\n        self.init_class(qname)\n        self.class_usages[qname].append(ClassUsage(qname, location))\n\n    def init_class(self, qname: ClassQName) -> None:\n        if qname not in self.class_usages:\n            self.class_usages[qname] = []\n\n    def remove_class(self, class_qname: ClassQName) -> None:\n        if class_qname in self.class_usages:\n            del self.class_usages[class_qname]\n\n        for function_qname in list(self.function_usages.keys()):\n            if function_qname.startswith(class_qname):\n                self.remove_function(function_qname)\n\n    def add_function_usage(self, qname: FunctionQName, location: Location) -> None:\n        self.init_function(qname)\n        self.function_usages[qname].append(FunctionUsage(qname, location))\n\n    def init_function(self, qname: FunctionQName) -> None:\n        if qname not in self.function_usages:\n            self.function_usages[qname] = []\n\n    def remove_function(self, function_qname: FunctionQName) -> None:\n        if function_qname in self.function_usages:\n            del self.function_usages[function_qname]\n\n        for parameter_qname in list(self.parameter_usages.keys()):\n            if parameter_qname.startswith(function_qname):\n                self.remove_parameter(parameter_qname)\n\n    def add_parameter_usage(self, qname: ParameterQName, location: Location) -> None:\n        self.init_parameter(qname)\n        self.parameter_usages[qname].append(ParameterUsage(qname, location))\n\n    def init_parameter(self, qname: ParameterQName) -> None:\n        if qname not in self.parameter_usages:\n            self.parameter_usages[qname] = []\n\n    def remove_parameter(self, qname: ParameterQName) -> None:\n        if qname in self.parameter_usages:\n            del self.parameter_usages[qname]\n\n        self.remove_value(qname)\n\n    def add_value_usage(\n        self,\n        parameter_qname: ParameterQName,\n        value: StringifiedValue,\n        location: Location,\n    ) -> None:\n        self.init_value(parameter_qname)\n\n        if value not in self.value_usages[parameter_qname]:\n            self.value_usages[parameter_qname][value] = []\n\n        self.value_usages[parameter_qname][value].append(\n            ValueUsage(parameter_qname, value, location)\n        )\n\n    def init_value(self, parameter_qname: ParameterQName) -> None:\n        if parameter_qname not in self.value_usages:\n            self.value_usages[parameter_qname] = {}\n\n    def remove_value(self, qname: ParameterQName) -> None:\n        if qname in self.value_usages:\n            del self.value_usages[qname]\n\n    def n_class_usages(self, qname: ClassQName) -> int:\n        if qname in self.class_usages:\n            return len(self.class_usages[qname])\n\n        return 0\n\n    def n_function_usages(self, qname: FunctionQName) -> int:\n        if qname in self.function_usages:\n            return len(self.function_usages[qname])\n\n        return 0\n\n    def n_parameter_usages(self, qname: ParameterQName) -> int:\n        if qname in self.parameter_usages:\n            return len(self.parameter_usages[qname])\n\n        return 0\n\n    def n_value_usages(self, qname: ParameterQName, value: str) -> int:\n        if qname in self.value_usages and value in self.value_usages[qname]:\n            return len(self.value_usages[qname][value])\n\n        return 0\n\n    def most_common_value(self, qname: ParameterQName) -> Optional[str]:\n        if qname not in self.value_usages:\n            return None\n\n        result = None\n        count = 0\n\n        for value, usages in self.value_usages[qname].items():\n            if len(usages) > count:\n                result = value\n                count = len(usages)\n\n        return result\n\n    def merge_other_into_self(self, other_usage_store: UsageStore) -> UsageStore:\n        \"\"\"\n        Merges the other usage store into this one **in-place** and returns this store.\n\n        :param other_usage_store: The usage store to merge into this one.\n        :return: This usage store.\n        \"\"\"\n\n        # Merge class usages\n        for class_usages in other_usage_store.class_usages.values():\n            for class_usage in class_usages:\n                self.add_class_usage(class_usage.qname, class_usage.location)\n\n        # Merge function usages\n        for function_usages in other_usage_store.function_usages.values():\n            for function_usage in function_usages:\n                self.add_function_usage(function_usage.qname, function_usage.location)\n\n        # Merge parameter usages\n        for parameter_usages in other_usage_store.parameter_usages.values():\n            for parameter_usage in parameter_usages:\n                self.add_parameter_usage(\n                    parameter_usage.qname, parameter_usage.location\n                )\n\n        # Merge value usages\n        for value_usages in other_usage_store.value_usages.values():\n            for value_usages_of_parameter in value_usages.values():\n                for value_usage_of_parameter in value_usages_of_parameter:\n                    self.add_value_usage(\n                        value_usage_of_parameter.parameter_qname,\n                        value_usage_of_parameter.value,\n                        value_usage_of_parameter.location,\n                    )\n\n        return self\n\n    def to_json(self) -> Any:\n        return {\n            \"class_usages\": {\n                qname: [usage.location.to_json() for usage in usages]\n                for qname, usages in self.class_usages.items()\n            },\n            \"function_usages\": {\n                qname: [usage.location.to_json() for usage in usages]\n                for qname, usages in self.function_usages.items()\n            },\n            \"parameter_usages\": {\n                qname: [usage.location.to_json() for usage in usages]\n                for qname, usages in self.parameter_usages.items()\n            },\n            \"value_usages\": {\n                parameter_qname: {\n                    value: [usage.location.to_json() for usage in usages]\n                    for value, usages in values.items()\n                }\n                for parameter_qname, values in self.value_usages.items()\n            },\n        }\n\n    def to_count_json(self) -> Any:\n        return {\n            \"class_counts\": {\n                qname: len(usages)\n                for qname, usages in sorted(\n                    self.class_usages.items(),\n                    key=lambda item: len(item[1]),\n                    reverse=True,\n                )\n            },\n            \"function_counts\": {\n                qname: len(usages)\n                for qname, usages in sorted(\n                    self.function_usages.items(),\n                    key=lambda item: len(item[1]),\n                    reverse=True,\n                )\n            },\n            \"parameter_counts\": {\n                qname: len(usages)\n                for qname, usages in sorted(\n                    self.parameter_usages.items(),\n                    key=lambda item: len(item[1]),\n                    reverse=True,\n                )\n            },\n            \"value_counts\": {\n                parameter_qname: {\n                    value: len(usages)\n                    for value, usages in sorted(\n                        values.items(), key=lambda item: len(item[1]), reverse=True\n                    )\n                }\n                for parameter_qname, values in self.value_usages.items()\n            },\n        }",
      "instance_attributes": [
        {
          "name": "class_usages",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        },
        {
          "name": "function_usages",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        },
        {
          "name": "parameter_usages",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        },
        {
          "name": "value_usages",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage",
      "name": "ValueUsage",
      "qname": "package_parser.commands.find_usages._model.ValueUsage",
      "decorators": [],
      "superclasses": [
        "Usage"
      ],
      "methods": [
        "packager-parser/package_parser.commands.find_usages._model/ValueUsage/__init__",
        "packager-parser/package_parser.commands.find_usages._model/ValueUsage/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ValueUsage(Usage):\n    def __init__(\n        self,\n        parameter_qname: ParameterQName,\n        value: StringifiedValue,\n        location: Location,\n    ) -> None:\n        self.parameter_qname: ParameterQName = parameter_qname\n        self.value: StringifiedValue = value\n        self.location: Location = location\n\n    def to_json(self) -> Any:\n        return {\n            \"parameter_qname\": self.parameter_qname,\n            \"value\": self.value,\n            \"location\": self.location.to_json(),\n        }",
      "instance_attributes": [
        {
          "name": "parameter_qname",
          "types": null
        },
        {
          "name": "value",
          "types": null
        },
        {
          "name": "location",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor",
      "name": "_AstVisitor",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__init__",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_module",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_module",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_classdef",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_classdef",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_functiondef",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_functiondef",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__description",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__function_parameters",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_default",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_docstring",
        "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/is_public"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class _AstVisitor:\n    def __init__(self, api: API) -> None:\n        self.reexported: set[str] = set()\n        self.api: API = api\n        self.__declaration_stack: list[Union[Module, Class, Function]] = []\n\n    def enter_module(self, module_node: astroid.Module):\n        imports: list[Import] = []\n        from_imports: list[FromImport] = []\n        visited_global_nodes: set[astroid.NodeNG] = set()\n\n        for _, global_node_list in module_node.globals.items():\n            global_node = global_node_list[0]\n\n            # For some reason from-imports get visited as often as there are imported names, leading to duplicates\n            if global_node in visited_global_nodes:\n                continue\n            visited_global_nodes.add(global_node)\n\n            # import X as Y\n            if isinstance(global_node, astroid.Import):\n                for (name, alias) in global_node.names:\n                    imports.append(Import(name, alias))\n\n            # from X import a as b\n            if isinstance(global_node, astroid.ImportFrom):\n                base_import_path = module_node.relative_to_absolute_name(\n                    global_node.modname, global_node.level\n                )\n\n                for (name, alias) in global_node.names:\n                    from_imports.append(FromImport(base_import_path, name, alias))\n\n                # Find re-exported declarations in __init__.py files\n                if _is_init_file(module_node.file):\n                    for declaration, _ in global_node.names:\n                        reexported_name = f\"{base_import_path}.{declaration}\"\n\n                        if reexported_name.startswith(module_node.name):\n                            self.reexported.add(reexported_name)\n\n        # Remember module, so we can later add classes and global functions\n        module = Module(\n            module_node.qname(),\n            imports,\n            from_imports,\n        )\n        self.__declaration_stack.append(module)\n\n    def leave_module(self, _: astroid.Module) -> None:\n        module = self.__declaration_stack.pop()\n        if not isinstance(module, Module):\n            raise AssertionError(\"Imbalanced push/pop on stack\")\n\n        self.api.add_module(module)\n\n    def enter_classdef(self, class_node: astroid.ClassDef) -> None:\n        qname = class_node.qname()\n\n        decorators: Optional[astroid.Decorators] = class_node.decorators\n        if decorators is not None:\n            decorator_names = [decorator.as_string() for decorator in decorators.nodes]\n        else:\n            decorator_names = []\n\n        numpydoc = NumpyDocString(inspect.cleandoc(class_node.doc or \"\"))\n\n        # Remember class, so we can later add methods\n        class_ = Class(\n            qname,\n            decorator_names,\n            class_node.basenames,\n            self.is_public(class_node.name, qname),\n            _AstVisitor.__description(numpydoc),\n            class_node.doc,\n            class_node.as_string(),\n        )\n        self.__declaration_stack.append(class_)\n\n    def leave_classdef(self, _: astroid.ClassDef) -> None:\n        class_ = self.__declaration_stack.pop()\n        if not isinstance(class_, Class):\n            raise AssertionError(\"Imbalanced push/pop on stack\")\n\n        if len(self.__declaration_stack) > 0:\n            parent = self.__declaration_stack[-1]\n\n            # Ignore nested classes for now\n            if isinstance(parent, Module):\n                self.api.add_class(class_)\n                parent.add_class(class_.qname)\n\n    def enter_functiondef(self, function_node: astroid.FunctionDef) -> None:\n        qname = function_node.qname()\n\n        decorators: Optional[astroid.Decorators] = function_node.decorators\n        if decorators is not None:\n            decorator_names = [decorator.as_string() for decorator in decorators.nodes]\n        else:\n            decorator_names = []\n\n        numpydoc = NumpyDocString(inspect.cleandoc(function_node.doc or \"\"))\n        is_public = self.is_public(function_node.name, qname)\n\n        function = Function(\n            qname,\n            decorator_names,\n            self.__function_parameters(function_node, is_public),\n            [],  # TODO: results\n            is_public,\n            _AstVisitor.__description(numpydoc),\n            function_node.doc,\n            function_node.as_string(),\n        )\n        self.__declaration_stack.append(function)\n\n    def leave_functiondef(self, _: astroid.FunctionDef) -> None:\n        function = self.__declaration_stack.pop()\n        if not isinstance(function, Function):\n            raise AssertionError(\"Imbalanced push/pop on stack\")\n\n        if len(self.__declaration_stack) > 0:\n            parent = self.__declaration_stack[-1]\n\n            # Ignore nested functions for now\n            if isinstance(parent, Module):\n                self.api.add_function(function)\n                parent.add_function(function.unique_qname)\n            elif isinstance(parent, Class):\n                self.api.add_function(function)\n                parent.add_method(function.unique_qname)\n\n    @staticmethod\n    def __description(numpydoc: NumpyDocString) -> str:\n        has_summary = \"Summary\" in numpydoc and len(numpydoc[\"Summary\"]) > 0\n        has_extended_summary = (\n            \"Extended Summary\" in numpydoc and len(numpydoc[\"Extended Summary\"]) > 0\n        )\n\n        result = \"\"\n        if has_summary:\n            result += \"\\n\".join(numpydoc[\"Summary\"])\n        if has_summary and has_extended_summary:\n            result += \"\\n\\n\"\n        if has_extended_summary:\n            result += \"\\n\".join(numpydoc[\"Extended Summary\"])\n        return result\n\n    @staticmethod\n    def __function_parameters(\n        node: astroid.FunctionDef, function_is_public: bool\n    ) -> list[Parameter]:\n        parameters = node.args\n        n_implicit_parameters = node.implicit_parameters()\n\n        # For constructors (__init__ functions) the parameters are described on the class\n        if node.name == \"__init__\" and isinstance(node.parent, astroid.ClassDef):\n            docstring = node.parent.doc\n        else:\n            docstring = node.doc\n        function_numpydoc = NumpyDocString(inspect.cleandoc(docstring or \"\"))\n\n        # Arguments that can be specified positionally only ( f(1) works but not f(x=1) )\n        result = [\n            Parameter(\n                it.name,\n                default_value=None,\n                is_public=function_is_public,\n                assigned_by=ParameterAssignment.POSITION_ONLY,\n                docstring=_AstVisitor.__parameter_docstring(function_numpydoc, it.name),\n            )\n            for it in parameters.posonlyargs\n        ]\n\n        # Arguments that can be specified positionally or by name ( f(1) and f(x=1) both work )\n        result += [\n            Parameter(\n                it.name,\n                _AstVisitor.__parameter_default(\n                    parameters.defaults,\n                    index - len(parameters.args) + len(parameters.defaults),\n                ),\n                function_is_public,\n                ParameterAssignment.POSITION_OR_NAME,\n                _AstVisitor.__parameter_docstring(function_numpydoc, it.name),\n            )\n            for index, it in enumerate(parameters.args)\n        ]\n\n        # Arguments that can be specified by name only ( f(x=1) works but not f(1) )\n        result += [\n            Parameter(\n                it.name,\n                _AstVisitor.__parameter_default(\n                    parameters.kw_defaults,\n                    index - len(parameters.kwonlyargs) + len(parameters.kw_defaults),\n                ),\n                function_is_public,\n                ParameterAssignment.NAME_ONLY,\n                _AstVisitor.__parameter_docstring(function_numpydoc, it.name),\n            )\n            for index, it in enumerate(parameters.kwonlyargs)\n        ]\n\n        return result[n_implicit_parameters:]\n\n    @staticmethod\n    def __parameter_default(\n        defaults: list[astroid.NodeNG], default_index: int\n    ) -> Optional[str]:\n        if 0 <= default_index < len(defaults):\n            default = defaults[default_index]\n            if default is None:\n                return None\n            return default.as_string()\n        else:\n            return None\n\n    @staticmethod\n    def __parameter_docstring(\n        function_numpydoc: NumpyDocString, parameter_name: str\n    ) -> ParameterAndResultDocstring:\n        parameters_numpydoc = function_numpydoc[\"Parameters\"]\n        candidate_parameters_numpydoc = [\n            it for it in parameters_numpydoc if it.name == parameter_name\n        ]\n\n        if len(candidate_parameters_numpydoc) > 0:\n            last_parameter_numpydoc = candidate_parameters_numpydoc[-1]\n            return ParameterAndResultDocstring(\n                last_parameter_numpydoc.type, \"\\n\".join(last_parameter_numpydoc.desc)\n            )\n\n        return ParameterAndResultDocstring(\"\", \"\")\n\n    def is_public(self, name: str, qualified_name: str) -> bool:\n        if name.startswith(\"_\") and not name.endswith(\"__\"):\n            return False\n\n        if qualified_name in self.reexported:\n            return True\n\n        # Containing class is re-exported (always false if the current API element is not a method)\n        if parent_qname(qualified_name) in self.reexported:\n            return True\n\n        # The slicing is necessary so __init__ functions are not excluded (already handled in the first condition).\n        return all(not it.startswith(\"_\") for it in qualified_name.split(\".\")[:-1])",
      "instance_attributes": [
        {
          "name": "reexported",
          "types": {
            "kind": "NamedType",
            "name": "set"
          }
        },
        {
          "name": "api",
          "types": null
        },
        {
          "name": "__declaration_stack",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API",
      "name": "API",
      "qname": "package_parser.commands.get_api._model.API",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/API/from_json",
        "packager-parser/package_parser.commands.get_api._model/API/__init__",
        "packager-parser/package_parser.commands.get_api._model/API/add_module",
        "packager-parser/package_parser.commands.get_api._model/API/add_class",
        "packager-parser/package_parser.commands.get_api._model/API/add_function",
        "packager-parser/package_parser.commands.get_api._model/API/is_public_class",
        "packager-parser/package_parser.commands.get_api._model/API/is_public_function",
        "packager-parser/package_parser.commands.get_api._model/API/class_count",
        "packager-parser/package_parser.commands.get_api._model/API/public_class_count",
        "packager-parser/package_parser.commands.get_api._model/API/function_count",
        "packager-parser/package_parser.commands.get_api._model/API/public_function_count",
        "packager-parser/package_parser.commands.get_api._model/API/parameter_count",
        "packager-parser/package_parser.commands.get_api._model/API/public_parameter_count",
        "packager-parser/package_parser.commands.get_api._model/API/parameters",
        "packager-parser/package_parser.commands.get_api._model/API/get_default_value",
        "packager-parser/package_parser.commands.get_api._model/API/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class API:\n    @staticmethod\n    def from_json(json: Any) -> API:\n        result = API(json[\"distribution\"], json[\"package\"], json[\"version\"])\n\n        for module_json in json[\"modules\"]:\n            result.add_module(Module.from_json(module_json))\n\n        for class_json in json[\"classes\"]:\n            result.add_class(Class.from_json(class_json))\n\n        for function_json in json[\"functions\"]:\n            result.add_function(Function.from_json(function_json))\n\n        return result\n\n    def __init__(self, distribution: str, package: str, version: str) -> None:\n        self.distribution: str = distribution\n        self.package: str = package\n        self.version: str = version\n        self.modules: dict[str, Module] = dict()\n        self.classes: dict[str, Class] = dict()\n        self.functions: dict[str, Function] = dict()\n\n    def add_module(self, module: Module) -> None:\n        self.modules[module.name] = module\n\n    def add_class(self, class_: Class) -> None:\n        self.classes[class_.qname] = class_\n\n    def add_function(self, function: Function) -> None:\n        self.functions[function.unique_qname] = function\n\n    def is_public_class(self, class_qname: str) -> bool:\n        return class_qname in self.classes and self.classes[class_qname].is_public\n\n    def is_public_function(self, function_unique_qname: str) -> bool:\n        return (\n            function_unique_qname in self.functions\n            and self.functions[function_unique_qname].is_public\n        )\n\n    def class_count(self) -> int:\n        return len(self.classes)\n\n    def public_class_count(self) -> int:\n        return len([it for it in self.classes.values() if it.is_public])\n\n    def function_count(self) -> int:\n        return len(self.functions)\n\n    def public_function_count(self) -> int:\n        return len([it for it in self.functions.values() if it.is_public])\n\n    def parameter_count(self) -> int:\n        return len(self.parameters())\n\n    def public_parameter_count(self) -> int:\n        return len([it for it in self.parameters().values() if it.is_public])\n\n    def parameters(self) -> dict[str, Parameter]:\n        result: dict[str, Parameter] = {}\n\n        for function in self.functions.values():\n            for parameter in function.parameters:\n                parameter_qname = f\"{function.qname}.{parameter.name}\"\n                result[parameter_qname] = parameter\n\n        return result\n\n    def get_default_value(self, parameter_unique_qname: str) -> Optional[str]:\n        function_unique_qname = parent_qname(parameter_unique_qname)\n        parameter_name = declaration_qname_to_name(parameter_unique_qname)\n\n        if function_unique_qname not in self.functions:\n            return None\n\n        for parameter in self.functions[function_unique_qname].parameters:\n            if parameter.name == parameter_name:\n                return parameter.default_value\n\n        return None\n\n    def to_json(self) -> Any:\n        return {\n            \"distribution\": self.distribution,\n            \"package\": self.package,\n            \"version\": self.version,\n            \"modules\": [\n                module.to_json()\n                for module in sorted(self.modules.values(), key=lambda it: it.name)\n            ],\n            \"classes\": [\n                clazz.to_json()\n                for clazz in sorted(self.classes.values(), key=lambda it: it.qname)\n            ],\n            \"functions\": [\n                function.to_json()\n                for function in sorted(\n                    self.functions.values(), key=lambda it: it.unique_qname\n                )\n            ],\n        }",
      "instance_attributes": [
        {
          "name": "distribution",
          "types": null
        },
        {
          "name": "package",
          "types": null
        },
        {
          "name": "version",
          "types": null
        },
        {
          "name": "modules",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        },
        {
          "name": "classes",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        },
        {
          "name": "functions",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/APIDependencies",
      "name": "APIDependencies",
      "qname": "package_parser.commands.get_api._model.APIDependencies",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/APIDependencies/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class APIDependencies:\n    dependencies: Dict\n\n    def to_json(self) -> Dict:\n        return {\n            function_name: {\n                parameter_name: [dependency.to_json() for dependency in dependencies]\n                for parameter_name, dependencies in parameter_name.items()\n            }\n            for function_name, parameter_name in self.dependencies.items()\n        }",
      "instance_attributes": [
        {
          "name": "dependencies",
          "types": {
            "kind": "NamedType",
            "name": "Dict"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Action",
      "name": "Action",
      "qname": "package_parser.commands.get_api._model.Action",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Action/from_json",
        "packager-parser/package_parser.commands.get_api._model/Action/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Action:\n    action: str\n\n    @classmethod\n    def from_json(cls, json: Any):\n        return cls(json[\"action\"])\n\n    def to_json(self) -> Dict:\n        return {\"action\": self.action}",
      "instance_attributes": [
        {
          "name": "action",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Class",
      "name": "Class",
      "qname": "package_parser.commands.get_api._model.Class",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Class/from_json",
        "packager-parser/package_parser.commands.get_api._model/Class/__init__",
        "packager-parser/package_parser.commands.get_api._model/Class/name@getter",
        "packager-parser/package_parser.commands.get_api._model/Class/add_method",
        "packager-parser/package_parser.commands.get_api._model/Class/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Class:\n    @staticmethod\n    def from_json(json: Any) -> Class:\n        result = Class(\n            json[\"qname\"],\n            json[\"decorators\"],\n            json[\"superclasses\"],\n            json[\"is_public\"],\n            json[\"description\"],\n            json[\"docstring\"],\n            json[\"source_code\"],\n        )\n\n        for method_unique_qname in json[\"methods\"]:\n            result.add_method(method_unique_qname)\n\n        return result\n\n    def __init__(\n        self,\n        qname: str,\n        decorators: list[str],\n        superclasses: list[str],\n        is_public: bool,\n        description: str,\n        docstring: str,\n        source_code: str,\n    ) -> None:\n        self.qname: str = qname\n        self.decorators: list[str] = decorators\n        self.superclasses: list[str] = superclasses\n        self.methods: list[str] = []\n        self.is_public: bool = is_public\n        self.description: str = description\n        self.docstring: str = docstring\n        self.source_code: str = source_code\n\n    @property\n    def name(self) -> str:\n        return self.qname.split(\".\")[-1]\n\n    def add_method(self, method_unique_qname: str) -> None:\n        self.methods.append(method_unique_qname)\n\n    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"qname\": self.qname,\n            \"decorators\": self.decorators,\n            \"superclasses\": self.superclasses,\n            \"methods\": self.methods,\n            \"is_public\": self.is_public,\n            \"description\": self.description,\n            \"docstring\": self.docstring,\n            \"source_code\": self.source_code,\n        }",
      "instance_attributes": [
        {
          "name": "qname",
          "types": null
        },
        {
          "name": "decorators",
          "types": null
        },
        {
          "name": "superclasses",
          "types": null
        },
        {
          "name": "methods",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        },
        {
          "name": "is_public",
          "types": null
        },
        {
          "name": "description",
          "types": null
        },
        {
          "name": "docstring",
          "types": null
        },
        {
          "name": "source_code",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Condition",
      "name": "Condition",
      "qname": "package_parser.commands.get_api._model.Condition",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Condition/from_json",
        "packager-parser/package_parser.commands.get_api._model/Condition/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Condition:\n    condition: str\n\n    @classmethod\n    def from_json(cls, json: Any):\n        return cls(json[\"condition\"])\n\n    def to_json(self) -> Dict:\n        return {\"condition\": self.condition}",
      "instance_attributes": [
        {
          "name": "condition",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Dependency",
      "name": "Dependency",
      "qname": "package_parser.commands.get_api._model.Dependency",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Dependency/from_json",
        "packager-parser/package_parser.commands.get_api._model/Dependency/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Dependency:\n    hasDependentParameter: Parameter\n    isDependingOn: Parameter\n    hasCondition: Condition\n    hasAction: Action\n\n    @classmethod\n    def from_json(cls, json: Any):\n        return cls(\n            Parameter.from_json(json[\"hasDependentParameter\"]),\n            Parameter.from_json(json[\"isDependingOn\"]),\n            Condition.from_json(json[\"hasCondition\"]),\n            Action.from_json(json[\"hasAction\"]),\n        )\n\n    def to_json(self) -> Dict:\n        return {\n            \"hasDependentParameter\": self.hasDependentParameter.to_json(),\n            \"isDependingOn\": self.isDependingOn.to_json(),\n            \"hasCondition\": self.hasCondition.to_json(),\n            \"hasAction\": self.hasAction.to_json(),\n        }",
      "instance_attributes": [
        {
          "name": "hasDependentParameter",
          "types": {
            "kind": "NamedType",
            "name": "Parameter"
          }
        },
        {
          "name": "isDependingOn",
          "types": {
            "kind": "NamedType",
            "name": "Parameter"
          }
        },
        {
          "name": "hasCondition",
          "types": {
            "kind": "NamedType",
            "name": "Condition"
          }
        },
        {
          "name": "hasAction",
          "types": {
            "kind": "NamedType",
            "name": "Action"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/FromImport",
      "name": "FromImport",
      "qname": "package_parser.commands.get_api._model.FromImport",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/FromImport/from_json",
        "packager-parser/package_parser.commands.get_api._model/FromImport/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class FromImport:\n    module_name: str\n    declaration_name: str\n    alias: Optional[str]\n\n    @staticmethod\n    def from_json(json: Any) -> FromImport:\n        return FromImport(json[\"module\"], json[\"declaration\"], json[\"alias\"])\n\n    def to_json(self) -> Any:\n        return {\n            \"module\": self.module_name,\n            \"declaration\": self.declaration_name,\n            \"alias\": self.alias,\n        }",
      "instance_attributes": [
        {
          "name": "module_name",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "declaration_name",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "alias",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function",
      "name": "Function",
      "qname": "package_parser.commands.get_api._model.Function",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Function/from_json",
        "packager-parser/package_parser.commands.get_api._model/Function/name@getter",
        "packager-parser/package_parser.commands.get_api._model/Function/unique_name@getter",
        "packager-parser/package_parser.commands.get_api._model/Function/unique_qname@getter",
        "packager-parser/package_parser.commands.get_api._model/Function/is_getter",
        "packager-parser/package_parser.commands.get_api._model/Function/is_setter",
        "packager-parser/package_parser.commands.get_api._model/Function/is_deleter",
        "packager-parser/package_parser.commands.get_api._model/Function/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Function:\n    qname: str\n    decorators: list[str]\n    parameters: list[Parameter]\n    results: list[Result]\n    is_public: bool\n    description: str\n    docstring: str\n    source_code: str\n\n    @staticmethod\n    def from_json(json: Any) -> Function:\n        return Function(\n            json[\"qname\"],\n            json[\"decorators\"],\n            [\n                Parameter.from_json(parameter_json)\n                for parameter_json in json[\"parameters\"]\n            ],\n            [Result.from_json(result_json) for result_json in json[\"results\"]],\n            json[\"is_public\"],\n            json[\"description\"],\n            json[\"docstring\"],\n            json[\"source_code\"],\n        )\n\n    @property\n    def name(self) -> str:\n        return self.qname.split(\".\")[-1]\n\n    @property\n    def unique_name(self) -> str:\n        return self.unique_qname.split(\".\")[-1]\n\n    @property\n    def unique_qname(self) -> str:\n        result = self.qname\n\n        if self.is_getter():\n            result += \"@getter\"\n        elif self.is_setter():\n            result += \"@setter\"\n        elif self.is_deleter():\n            result += \"@deleter\"\n\n        return result\n\n    def is_getter(self) -> bool:\n        return \"property\" in self.decorators\n\n    def is_setter(self) -> bool:\n        for decorator in self.decorators:\n            if re.search(r\"^[^.]*.setter$\", decorator):\n                return True\n\n        return False\n\n    def is_deleter(self) -> bool:\n        for decorator in self.decorators:\n            if re.search(r\"^[^.]*.deleter$\", decorator):\n                return True\n\n        return False\n\n    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"unique_name\": self.unique_name,\n            \"qname\": self.qname,\n            \"unique_qname\": self.unique_qname,\n            \"decorators\": self.decorators,\n            \"parameters\": [parameter.to_json() for parameter in self.parameters],\n            \"results\": [result.to_json() for result in self.results],\n            \"is_public\": self.is_public,\n            \"description\": self.description,\n            \"docstring\": self.docstring,\n            \"source_code\": self.source_code,\n        }",
      "instance_attributes": [
        {
          "name": "qname",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "decorators",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        },
        {
          "name": "parameters",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        },
        {
          "name": "results",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        },
        {
          "name": "is_public",
          "types": {
            "kind": "NamedType",
            "name": "bool"
          }
        },
        {
          "name": "description",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "docstring",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "source_code",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Import",
      "name": "Import",
      "qname": "package_parser.commands.get_api._model.Import",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Import/from_json",
        "packager-parser/package_parser.commands.get_api._model/Import/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Import:\n    module_name: str\n    alias: Optional[str]\n\n    @staticmethod\n    def from_json(json: Any) -> Import:\n        return Import(json[\"module\"], json[\"alias\"])\n\n    def to_json(self) -> Any:\n        return {\"module\": self.module_name, \"alias\": self.alias}",
      "instance_attributes": [
        {
          "name": "module_name",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "alias",
          "types": null
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Module",
      "name": "Module",
      "qname": "package_parser.commands.get_api._model.Module",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Module/from_json",
        "packager-parser/package_parser.commands.get_api._model/Module/__init__",
        "packager-parser/package_parser.commands.get_api._model/Module/add_class",
        "packager-parser/package_parser.commands.get_api._model/Module/add_function",
        "packager-parser/package_parser.commands.get_api._model/Module/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Module:\n    @staticmethod\n    def from_json(json: Any) -> Module:\n        result = Module(\n            json[\"name\"],\n            [Import.from_json(import_json) for import_json in json[\"imports\"]],\n            [\n                FromImport.from_json(from_import_json)\n                for from_import_json in json[\"from_imports\"]\n            ],\n        )\n\n        for class_qname in json[\"classes\"]:\n            result.add_class(class_qname)\n\n        for function_unique_qname in json[\"functions\"]:\n            result.add_function(function_unique_qname)\n\n        return result\n\n    def __init__(\n        self, name: str, imports: list[Import], from_imports: list[FromImport]\n    ):\n        self.name: str = name\n        self.imports: list[Import] = imports\n        self.from_imports: list[FromImport] = from_imports\n        self.classes: list[str] = []\n        self.functions: list[str] = []\n\n    def add_class(self, class_qname: str) -> None:\n        self.classes.append(class_qname)\n\n    def add_function(self, function_unique_qname: str) -> None:\n        self.functions.append(function_unique_qname)\n\n    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"imports\": [import_.to_json() for import_ in self.imports],\n            \"from_imports\": [\n                from_import.to_json() for from_import in self.from_imports\n            ],\n            \"classes\": self.classes,\n            \"functions\": self.functions,\n        }",
      "instance_attributes": [
        {
          "name": "name",
          "types": null
        },
        {
          "name": "imports",
          "types": null
        },
        {
          "name": "from_imports",
          "types": null
        },
        {
          "name": "classes",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        },
        {
          "name": "functions",
          "types": {
            "kind": "NamedType",
            "name": "list"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Parameter",
      "name": "Parameter",
      "qname": "package_parser.commands.get_api._model.Parameter",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Parameter/from_json",
        "packager-parser/package_parser.commands.get_api._model/Parameter/__init__",
        "packager-parser/package_parser.commands.get_api._model/Parameter/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Parameter:\n    @classmethod\n    def from_json(cls, json: Any):\n        return cls(\n            json[\"name\"],\n            json[\"default_value\"],\n            json[\"is_public\"],\n            ParameterAssignment[json[\"assigned_by\"]],\n            ParameterAndResultDocstring.from_json(json[\"docstring\"]),\n        )\n\n    def __init__(\n        self,\n        name: str,\n        default_value: Optional[str],\n        is_public: bool,\n        assigned_by: ParameterAssignment,\n        docstring: ParameterAndResultDocstring,\n    ) -> None:\n        self.name: str = name\n        self.default_value: Optional[str] = default_value\n        self.is_public: bool = is_public\n        self.assigned_by: ParameterAssignment = assigned_by\n        self.docstring = docstring\n        self.refined_type: RefinedType = RefinedType.from_docstring(docstring)\n\n    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"default_value\": self.default_value,\n            \"is_public\": self.is_public,\n            \"assigned_by\": self.assigned_by.name,\n            \"docstring\": self.docstring.to_json(),\n            \"refined_type\": self.refined_type.as_dict(),\n        }",
      "instance_attributes": [
        {
          "name": "name",
          "types": null
        },
        {
          "name": "default_value",
          "types": null
        },
        {
          "name": "is_public",
          "types": null
        },
        {
          "name": "assigned_by",
          "types": null
        },
        {
          "name": "docstring",
          "types": {
            "kind": "NamedType",
            "name": "ParameterAndResultDocstring"
          }
        },
        {
          "name": "refined_type",
          "types": {
            "kind": "NamedType",
            "name": "RefinedType"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring",
      "name": "ParameterAndResultDocstring",
      "qname": "package_parser.commands.get_api._model.ParameterAndResultDocstring",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/from_json",
        "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterAndResultDocstring:\n    type: str\n    description: str\n\n    @classmethod\n    def from_json(cls, json: Any):\n        return cls(json[\"type\"], json[\"description\"])\n\n    def to_json(self) -> Any:\n        return {\"type\": self.type, \"description\": self.description}",
      "instance_attributes": [
        {
          "name": "type",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "description",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterAssignment",
      "name": "ParameterAssignment",
      "qname": "package_parser.commands.get_api._model.ParameterAssignment",
      "decorators": [],
      "superclasses": [
        "Enum"
      ],
      "methods": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterAssignment(Enum):\n    POSITION_ONLY = (auto(),)\n    POSITION_OR_NAME = (auto(),)\n    NAME_ONLY = (auto(),)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterHasValue",
      "name": "ParameterHasValue",
      "qname": "package_parser.commands.get_api._model.ParameterHasValue",
      "decorators": [],
      "superclasses": [
        "StaticCondition"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/ParameterHasValue/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterHasValue(StaticCondition):\n    def __init__(self, condition: str) -> None:\n        super().__init__(condition)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIgnored",
      "name": "ParameterIsIgnored",
      "qname": "package_parser.commands.get_api._model.ParameterIsIgnored",
      "decorators": [],
      "superclasses": [
        "StaticAction"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/ParameterIsIgnored/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterIsIgnored(StaticAction):\n    def __init__(self, action: str) -> None:\n        super().__init__(action)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIllegal",
      "name": "ParameterIsIllegal",
      "qname": "package_parser.commands.get_api._model.ParameterIsIllegal",
      "decorators": [],
      "superclasses": [
        "StaticAction"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/ParameterIsIllegal/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterIsIllegal(StaticAction):\n    def __init__(self, action: str) -> None:\n        super().__init__(action)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsNone",
      "name": "ParameterIsNone",
      "qname": "package_parser.commands.get_api._model.ParameterIsNone",
      "decorators": [],
      "superclasses": [
        "StaticCondition"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/ParameterIsNone/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class ParameterIsNone(StaticCondition):\n    def __init__(self, condition: str) -> None:\n        super().__init__(condition)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RefinedType",
      "name": "RefinedType",
      "qname": "package_parser.commands.get_api._model.RefinedType",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/RefinedType/from_docstring",
        "packager-parser/package_parser.commands.get_api._model/RefinedType/__init__",
        "packager-parser/package_parser.commands.get_api._model/RefinedType/as_dict"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class RefinedType:\n    @classmethod\n    def from_docstring(cls, docstring: ParameterAndResultDocstring) -> RefinedType:\n        docstring_str = \" \".join([docstring.type, docstring.description])\n        enum = EnumType.from_string(docstring_str)\n        boundary = BoundaryType.from_string(docstring_str)\n\n        if enum is not None and boundary is not None:\n            union = UnionType()\n            union.types.add(enum)\n            union.types.add(boundary)\n            return RefinedType(union)\n\n        if enum is not None:\n            return RefinedType(enum)\n\n        if boundary is not None:\n            return RefinedType(boundary)\n\n        return RefinedType()\n\n    def __init__(\n        self,\n        ref_type: Union[UnionType, BoundaryType, EnumType, NamedType, None] = None,\n    ) -> None:\n        self.ref_type = ref_type\n\n    def as_dict(self):\n        if self.ref_type is not None:\n            return {\"kind\": self.ref_type.__class__.__name__, **asdict(self.ref_type)}\n        return {}",
      "instance_attributes": [
        {
          "name": "ref_type",
          "types": {
            "kind": "UnionType",
            "types": [
              {
                "kind": "NamedType",
                "name": "UnionType"
              },
              {
                "kind": "NamedType",
                "name": "NamedType"
              },
              {
                "kind": "NamedType",
                "name": "BoundaryType"
              },
              {
                "kind": "NamedType",
                "name": "EnumType"
              }
            ]
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Result",
      "name": "Result",
      "qname": "package_parser.commands.get_api._model.Result",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/Result/from_json",
        "packager-parser/package_parser.commands.get_api._model/Result/to_json"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class Result:\n    name: str\n    docstring: ParameterAndResultDocstring\n\n    @staticmethod\n    def from_json(json: Any) -> Result:\n        return Result(\n            json[\"name\"], ParameterAndResultDocstring.from_json(json[\"docstring\"])\n        )\n\n    def to_json(self) -> Any:\n        return {\"name\": self.name, \"docstring\": self.docstring.to_json()}",
      "instance_attributes": [
        {
          "name": "name",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "docstring",
          "types": {
            "kind": "NamedType",
            "name": "ParameterAndResultDocstring"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RuntimeAction",
      "name": "RuntimeAction",
      "qname": "package_parser.commands.get_api._model.RuntimeAction",
      "decorators": [],
      "superclasses": [
        "Action"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/RuntimeAction/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class RuntimeAction(Action):\n    def __init__(self, action: str) -> None:\n        super().__init__(action)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RuntimeCondition",
      "name": "RuntimeCondition",
      "qname": "package_parser.commands.get_api._model.RuntimeCondition",
      "decorators": [],
      "superclasses": [
        "Condition"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/RuntimeCondition/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class RuntimeCondition(Condition):\n    def __init__(self, condition: str) -> None:\n        super().__init__(condition)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/StaticAction",
      "name": "StaticAction",
      "qname": "package_parser.commands.get_api._model.StaticAction",
      "decorators": [],
      "superclasses": [
        "Action"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/StaticAction/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class StaticAction(Action):\n    def __init__(self, action: str) -> None:\n        super().__init__(action)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/StaticCondition",
      "name": "StaticCondition",
      "qname": "package_parser.commands.get_api._model.StaticCondition",
      "decorators": [],
      "superclasses": [
        "Condition"
      ],
      "methods": [
        "packager-parser/package_parser.commands.get_api._model/StaticCondition/__init__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class StaticCondition(Condition):\n    def __init__(self, condition: str) -> None:\n        super().__init__(condition)",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType",
      "name": "BoundaryType",
      "qname": "package_parser.commands.get_api._refined_types.BoundaryType",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/_is_inclusive",
        "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/from_string",
        "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/__eq__"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class BoundaryType:\n\n    INFINITY: ClassVar = \"Infinity\"\n\n    base_type: str\n    min: Union[float, int]\n    max: Union[float, int, str]\n    min_inclusive: bool\n    max_inclusive: bool\n\n    @classmethod\n    def _is_inclusive(cls, bracket: str) -> bool:\n        if bracket == \"(\" or bracket == \")\":\n            return False\n        elif bracket == \"[\" or bracket == \"]\":\n            return True\n        else:\n            raise Exception(f\"{bracket} is not one of []()\")\n\n    @classmethod\n    def from_string(cls, string: str) -> Optional[BoundaryType]:\n        pattern = r\"\"\"(?P<base_type>float|int)?[ ]  # optional base type of either float or int\n                    (in|of)[ ](the[ ])?(range|interval)[ ](of[ ])?  # 'in' or 'of', optional 'the', 'range' or 'interval', optional 'of'\n                    `?(?P<min_bracket>\\[|\\()(?P<min>\\d+.?\\d*),[ ]  # left side of the range\n                    (?P<max>\\d+.?\\d*|infinity)(?P<max_bracket>\\]|\\))`?\"\"\"  # right side of the range\n        match = re.search(pattern, string, re.VERBOSE)\n\n        if match is not None:\n            base_type = match.group(\"base_type\")\n            if base_type is None:\n                base_type = \"float\"\n            base_type = eval(base_type)\n\n            min_value = base_type(match.group(\"min\"))\n            max_value = match.group(\"max\")\n            if max_value != \"infinity\":\n                max_value = base_type(max_value)\n            else:\n                max_value = BoundaryType.INFINITY\n            min_bracket = match.group(\"min_bracket\")\n            max_bracket = match.group(\"max_bracket\")\n            min_inclusive = BoundaryType._is_inclusive(min_bracket)\n            max_inclusive = BoundaryType._is_inclusive(max_bracket)\n\n            return BoundaryType(\n                base_type.__name__, min_value, max_value, min_inclusive, max_inclusive\n            )\n\n        return None\n\n    def __eq__(self, __o: object) -> bool:\n        if isinstance(__o, BoundaryType):\n            eq = (\n                self.base_type == __o.base_type\n                and self.min == __o.min\n                and self.min_inclusive == __o.min_inclusive\n                and self.max == __o.max\n            )\n            if eq:\n                if self.max == BoundaryType.INFINITY:\n                    return True\n                else:\n                    return self.max_inclusive == __o.max_inclusive\n            else:\n                return False\n        else:\n            return False",
      "instance_attributes": [
        {
          "name": "base_type",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        },
        {
          "name": "min",
          "types": null
        },
        {
          "name": "max",
          "types": null
        },
        {
          "name": "min_inclusive",
          "types": {
            "kind": "NamedType",
            "name": "bool"
          }
        },
        {
          "name": "max_inclusive",
          "types": {
            "kind": "NamedType",
            "name": "bool"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType",
      "name": "EnumType",
      "qname": "package_parser.commands.get_api._refined_types.EnumType",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._refined_types/EnumType/from_string",
        "packager-parser/package_parser.commands.get_api._refined_types/EnumType/update"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class EnumType:\n    values: set[str] = field(default_factory=set)\n\n    @classmethod\n    def from_string(cls, string: str) -> Optional[EnumType]:\n        def remove_backslash(e: str):\n            e = e.replace(r\"\\\"\", '\"')\n            e = e.replace(r\"\\'\", \"'\")\n            return e\n\n        enum_match = re.search(r\"{(.*?)}\", string)\n        if enum_match:\n            quotes = \"'\\\"\"\n            values = set()\n            enum_str = enum_match.group(1)\n            value = \"\"\n            inside_value = False\n            curr_quote = None\n            for i, char in enumerate(enum_str):\n                if char in quotes and (i == 0 or (i > 0 and enum_str[i - 1] != \"\\\\\")):\n                    if inside_value == False:\n                        inside_value = True\n                        curr_quote = char\n                    elif inside_value == True:\n                        if curr_quote == char:\n                            inside_value = False\n                            curr_quote = None\n                            values.add(remove_backslash(value))\n                            value = \"\"\n                        else:\n                            value += char\n                elif inside_value:\n                    value += char\n\n            return EnumType(values)\n\n        return None\n\n    def update(self, enum: EnumType):\n        self.values.update(enum.values)",
      "instance_attributes": [
        {
          "name": "values",
          "types": {
            "kind": "NamedType",
            "name": "set"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/NamedType",
      "name": "NamedType",
      "qname": "package_parser.commands.get_api._refined_types.NamedType",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_api._refined_types/NamedType/from_string"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class NamedType:\n    name: str\n\n    def from_string(self, string: str) -> set[NamedType]:\n        pass",
      "instance_attributes": [
        {
          "name": "name",
          "types": {
            "kind": "NamedType",
            "name": "str"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/UnionType",
      "name": "UnionType",
      "qname": "package_parser.commands.get_api._refined_types.UnionType",
      "decorators": [
        "dataclass"
      ],
      "superclasses": [],
      "methods": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "class UnionType:\n    types: set[Union[NamedType, EnumType, BoundaryType]] = field(default_factory=set)",
      "instance_attributes": [
        {
          "name": "types",
          "types": {
            "kind": "NamedType",
            "name": "set"
          }
        }
      ]
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor",
      "name": "DependencyExtractor",
      "qname": "package_parser.commands.get_dependencies._get_dependency.DependencyExtractor",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor/extract_pattern_parameter_adverbial_clause"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "Functions to extract each type of pattern in _dependency_patterns",
      "docstring": "Functions to extract each type of pattern in _dependency_patterns",
      "code": "class DependencyExtractor:\n    \"\"\"\n    Functions to extract each type of pattern in _dependency_patterns\n    \"\"\"\n\n    @staticmethod\n    def extract_pattern_parameter_adverbial_clause(\n        dependent_param: Parameter,\n        func_parameters: List[Parameter],\n        match: Tuple,\n        param_docstring: Doc,\n    ) -> Union[Dependency, None]:\n        is_depending_on_param_index = match[1][2]\n        is_depending_on_param_name = param_docstring[is_depending_on_param_index].text\n        is_depending_on_param = next(\n            filter(\n                lambda param: param.name == is_depending_on_param_name, func_parameters\n            ),\n            None,\n        )\n        if is_depending_on_param is None:\n            # Likely not a correct dependency match\n            return None\n\n        condition_token = param_docstring[match[1][1]]\n        condition = extract_condition(condition_token)\n\n        action_token = param_docstring[match[1][0]]\n        action = extract_action(action_token, condition_token)\n\n        return Dependency(\n            hasDependentParameter=dependent_param,\n            isDependingOn=is_depending_on_param,\n            hasCondition=condition,\n            hasAction=action,\n        )",
      "instance_attributes": []
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker",
      "name": "ASTWalker",
      "qname": "package_parser.utils._ASTWalker.ASTWalker",
      "decorators": [],
      "superclasses": [],
      "methods": [
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__init__",
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker/walk",
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__walk",
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__enter",
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__leave",
        "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__get_callbacks"
      ],
      "is_public": false,
      "reexported_by": [],
      "description": "A walker visiting a tree in preorder, calling on the handler:\n\n* enter_<class_name> on entering a node, where class name is the class of\nthe node in lower case.\n\n* leave_<class_name> on leaving a node, where class name is the class of\nthe node in lower case.",
      "docstring": "A walker visiting a tree in preorder, calling on the handler:\n\n* enter_<class_name> on entering a node, where class name is the class of\nthe node in lower case.\n\n* leave_<class_name> on leaving a node, where class name is the class of\nthe node in lower case.",
      "code": "class ASTWalker:\n    \"\"\"A walker visiting a tree in preorder, calling on the handler:\n\n    * enter_<class_name> on entering a node, where class name is the class of\n    the node in lower case.\n\n    * leave_<class_name> on leaving a node, where class name is the class of\n    the node in lower case.\n    \"\"\"\n\n    def __init__(self, handler: Any) -> None:\n        self._handler = handler\n        self._cache: dict[Type, _EnterAndLeaveFunctions] = {}\n\n    def walk(self, node: astroid.NodeNG) -> None:\n        self.__walk(node, set())\n\n    def __walk(self, node: astroid.NodeNG, visited_nodes: set[astroid.NodeNG]) -> None:\n        if node in visited_nodes:\n            raise AssertionError(\"Node visited twice\")\n        visited_nodes.add(node)\n\n        self.__enter(node)\n        for child_node in node.get_children():\n            self.__walk(child_node, visited_nodes)\n        self.__leave(node)\n\n    def __enter(self, node: astroid.NodeNG) -> None:\n        method = self.__get_callbacks(node)[0]\n        if method is not None:\n            method(node)\n\n    def __leave(self, node: astroid.NodeNG) -> None:\n        method = self.__get_callbacks(node)[1]\n        if method is not None:\n            method(node)\n\n    def __get_callbacks(self, node: astroid.NodeNG) -> _EnterAndLeaveFunctions:\n        klass = node.__class__\n        methods = self._cache.get(klass)\n\n        if methods is None:\n            handler = self._handler\n            class_name = klass.__name__.lower()\n            enter_method = getattr(\n                handler, f\"enter_{class_name}\", getattr(handler, \"enter_default\", None)\n            )\n            leave_method = getattr(\n                handler, f\"leave_{class_name}\", getattr(handler, \"leave_default\", None)\n            )\n            self._cache[klass] = (enter_method, leave_method)\n        else:\n            enter_method, leave_method = methods\n\n        return enter_method, leave_method",
      "instance_attributes": [
        {
          "name": "_handler",
          "types": {
            "kind": "NamedType",
            "name": "Any"
          }
        },
        {
          "name": "_cache",
          "types": {
            "kind": "NamedType",
            "name": "dict"
          }
        }
      ]
    }
  ],
  "functions": [
    {
      "id": "packager-parser/package_parser.cli/CustomEncoder/default",
      "name": "default",
      "qname": "package_parser.cli.CustomEncoder.default",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.cli/CustomEncoder/default/self",
          "name": "self",
          "qname": "package_parser.cli.CustomEncoder.default.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": true,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.cli/CustomEncoder/default/o",
          "name": "o",
          "qname": "package_parser.cli.CustomEncoder.default.o",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": true,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": true,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def default(self, o: Any) -> Any:\n        if isinstance(o, set):\n            return list(o)\n        return super().default(o)"
    },
    {
      "id": "packager-parser/package_parser.cli/__add_api_subparser",
      "name": "__add_api_subparser",
      "qname": "package_parser.cli.__add_api_subparser",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.cli/__add_api_subparser/subparsers",
          "name": "subparsers",
          "qname": "package_parser.cli.__add_api_subparser.subparsers",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __add_api_subparser(subparsers: _SubParsersAction) -> None:\n    api_parser = subparsers.add_parser(__API_COMMAND, help=\"List the API of a package.\")\n    api_parser.add_argument(\n        \"-p\",\n        \"--package\",\n        help=\"The name of the package. It must be installed in the current interpreter.\",\n        type=str,\n        required=True,\n    )\n    api_parser.add_argument(\n        \"-o\", \"--out\", help=\"Output directory.\", type=Path, required=True\n    )"
    },
    {
      "id": "packager-parser/package_parser.cli/__add_improve_subparser",
      "name": "__add_improve_subparser",
      "qname": "package_parser.cli.__add_improve_subparser",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.cli/__add_improve_subparser/subparsers",
          "name": "subparsers",
          "qname": "package_parser.cli.__add_improve_subparser.subparsers",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __add_improve_subparser(subparsers: _SubParsersAction) -> None:\n    improve_parser = subparsers.add_parser(\n        __IMPROVE_COMMAND, help=\"Suggest how to improve an existing API.\"\n    )\n    improve_parser.add_argument(\n        \"-a\",\n        \"--api\",\n        help=\"File created by the 'api' command.\",\n        type=argparse.FileType(\"r\"),\n        required=True,\n    )\n    improve_parser.add_argument(\n        \"-u\",\n        \"--usages\",\n        help=\"File created by the 'usages' command.\",\n        type=argparse.FileType(\"r\"),\n        required=True,\n    )\n    improve_parser.add_argument(\n        \"-o\", \"--out\", help=\"Output directory.\", type=Path, required=True\n    )\n    improve_parser.add_argument(\n        \"-m\",\n        \"--min\",\n        help=\"Minimum number of usages required to keep an API element.\",\n        type=int,\n        required=False,\n        default=1,\n    )"
    },
    {
      "id": "packager-parser/package_parser.cli/__add_usages_subparser",
      "name": "__add_usages_subparser",
      "qname": "package_parser.cli.__add_usages_subparser",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.cli/__add_usages_subparser/subparsers",
          "name": "subparsers",
          "qname": "package_parser.cli.__add_usages_subparser.subparsers",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __add_usages_subparser(subparsers: _SubParsersAction) -> None:\n    usages_parser = subparsers.add_parser(\n        __USAGES_COMMAND, help=\"Find usages of API elements.\"\n    )\n    usages_parser.add_argument(\n        \"-p\",\n        \"--package\",\n        help=\"The name of the package. It must be installed in the current interpreter.\",\n        type=str,\n        required=True,\n    )\n    usages_parser.add_argument(\n        \"-s\",\n        \"--src\",\n        help=\"Directory containing Python code.\",\n        type=Path,\n        required=True,\n    )\n    usages_parser.add_argument(\n        \"-t\",\n        \"--tmp\",\n        help=\"Directory where temporary files can be stored (to save progress in case the program crashes).\",\n        type=Path,\n        required=True,\n    )\n    usages_parser.add_argument(\n        \"-o\", \"--out\", help=\"Output directory.\", type=Path, required=True\n    )"
    },
    {
      "id": "packager-parser/package_parser.cli/__get_args",
      "name": "__get_args",
      "qname": "package_parser.cli.__get_args",
      "decorators": [],
      "parameters": [],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __get_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser(description=\"Analyze Python code.\")\n\n    # Commands\n    subparsers = parser.add_subparsers(dest=\"command\")\n    __add_api_subparser(subparsers)\n    __add_usages_subparser(subparsers)\n    __add_improve_subparser(subparsers)\n\n    return parser.parse_args()"
    },
    {
      "id": "packager-parser/package_parser.cli/cli",
      "name": "cli",
      "qname": "package_parser.cli.cli",
      "decorators": [],
      "parameters": [],
      "results": [],
      "is_public": true,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def cli() -> None:\n    args = __get_args()\n    if args.command == __API_COMMAND:\n        public_api = get_api(args.package)\n        public_api_dependencies = get_dependencies(public_api)\n\n        out_file_api = args.out.joinpath(\n            f\"{public_api.distribution}__{public_api.package}__{public_api.version}__api.json\"\n        )\n        out_file_api_dependencies = args.out.joinpath(\n            f\"{public_api.distribution}__{public_api.package}__{public_api.version}__api_dependencies.json\"\n        )\n        ensure_file_exists(out_file_api)\n        with out_file_api.open(\"w\") as f:\n            json.dump(public_api.to_json(), f, indent=2, cls=CustomEncoder)\n        with out_file_api_dependencies.open(\"w\") as f:\n            json.dump(public_api_dependencies.to_json(), f, indent=2, cls=CustomEncoder)\n\n    elif args.command == __USAGES_COMMAND:\n        usages = find_usages(args.package, args.src, args.tmp)\n\n        dist = distribution(args.package)\n\n        out_file = args.out.joinpath(\n            f\"{dist}__{args.package}__{distribution_version(dist)}__usages.json\"\n        )\n        ensure_file_exists(out_file)\n        with out_file.open(\"w\") as f:\n            json.dump(usages.to_json(), f, indent=2)\n\n    elif args.command == __IMPROVE_COMMAND:\n        suggest_improvements(args.api, args.usages, args.out, args.min)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/__init__/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.__init__.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/__init__/python_file",
          "name": "python_file",
          "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.__init__.python_file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, package_name: str, python_file: str) -> None:\n        self.package_name: str = package_name\n        self.python_file: str = python_file\n        self.usages: UsageStore = UsageStore()"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/enter_call",
      "name": "enter_call",
      "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.enter_call",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/enter_call/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.enter_call.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_UsageFinder/enter_call/node",
          "name": "node",
          "qname": "package_parser.commands.find_usages._ast_visitor._UsageFinder.enter_call.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def enter_call(self, node: astroid.Call):\n        called_tuple = _analyze_declaration_called_by(node, self.package_name)\n        if called_tuple is None:\n            return\n        called, function_qname, parameters, n_implicit_parameters = called_tuple\n\n        bound_parameters = _bound_parameters(\n            parameters, CallSite.from_call(node), n_implicit_parameters\n        )\n        if bound_parameters is None:\n            return\n\n        location = Location(self.python_file, node.lineno, node.col_offset)\n\n        # Add class usage\n        if (\n            isinstance(called, (astroid.BoundMethod, astroid.UnboundMethod))\n            or isinstance(called, astroid.FunctionDef)\n            and called.is_method()\n        ):\n            self.usages.add_class_usage(\n                \".\".join(function_qname.split(\".\")[:-1]), location\n            )\n\n        # Add function usage\n        self.usages.add_function_usage(function_qname, location)\n\n        # Add parameter & value usage\n        for parameter_name, value in bound_parameters.items():\n            parameter_qname = f\"{function_qname}.{parameter_name}\"\n            self.usages.add_parameter_usage(parameter_qname, location)\n\n            value = _stringify_value(value)\n            self.usages.add_value_usage(parameter_qname, value, location)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__called_constructor",
      "name": "__called_constructor",
      "qname": "package_parser.commands.find_usages._ast_visitor.__called_constructor",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__called_constructor/class_def",
          "name": "class_def",
          "qname": "package_parser.commands.find_usages._ast_visitor.__called_constructor.class_def",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __called_constructor(class_def: astroid.ClassDef) -> Optional[astroid.FunctionDef]:\n    try:\n        # Use last __init__\n        constructor = class_def.local_attr(\"__init__\")[-1]\n    except astroid.NotFoundError:\n        return None\n\n    if isinstance(constructor, astroid.FunctionDef):\n        return constructor\n    else:\n        return None"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__is_relevant_qualified_name",
      "name": "__is_relevant_qualified_name",
      "qname": "package_parser.commands.find_usages._ast_visitor.__is_relevant_qualified_name",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__is_relevant_qualified_name/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.find_usages._ast_visitor.__is_relevant_qualified_name.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__is_relevant_qualified_name/qualified_name",
          "name": "qualified_name",
          "qname": "package_parser.commands.find_usages._ast_visitor.__is_relevant_qualified_name.qualified_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __is_relevant_qualified_name(package_name: str, qualified_name: str) -> bool:\n    return qualified_name.startswith(package_name)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__n_implicit_parameters",
      "name": "__n_implicit_parameters",
      "qname": "package_parser.commands.find_usages._ast_visitor.__n_implicit_parameters",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/__n_implicit_parameters/called",
          "name": "called",
          "qname": "package_parser.commands.find_usages._ast_visitor.__n_implicit_parameters.called",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __n_implicit_parameters(called: astroid.NodeNG) -> int:\n    return called.implicit_parameters() if hasattr(called, \"implicit_parameters\") else 0"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_analyze_declaration_called_by",
      "name": "_analyze_declaration_called_by",
      "qname": "package_parser.commands.find_usages._ast_visitor._analyze_declaration_called_by",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_analyze_declaration_called_by/node",
          "name": "node",
          "qname": "package_parser.commands.find_usages._ast_visitor._analyze_declaration_called_by.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_analyze_declaration_called_by/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.find_usages._ast_visitor._analyze_declaration_called_by.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Returns None if the called declaration could not be determined or if it is not relevant for us. Otherwise, it\nreturns a tuple with the form (called, qualified_name, parameters, n_implicit_parameters).",
      "docstring": "Returns None if the called declaration could not be determined or if it is not relevant for us. Otherwise, it\nreturns a tuple with the form (called, qualified_name, parameters, n_implicit_parameters).",
      "code": "def _analyze_declaration_called_by(\n    node: astroid.Call, package_name: str\n) -> Optional[tuple[astroid.NodeNG, str, astroid.Arguments, int]]:\n    \"\"\"\n    Returns None if the called declaration could not be determined or if it is not relevant for us. Otherwise, it\n    returns a tuple with the form (called, qualified_name, parameters, n_implicit_parameters).\n    \"\"\"\n\n    called = safe_infer(node.func)\n    if called is None or not __is_relevant_qualified_name(package_name, called.qname()):\n        return None\n\n    n_implicit_parameters = __n_implicit_parameters(called)\n\n    if isinstance(called, astroid.ClassDef):\n        called = __called_constructor(called)\n        if called is None:\n            return None\n\n    if isinstance(\n        called, (astroid.BoundMethod, astroid.UnboundMethod, astroid.FunctionDef)\n    ):\n        return called, called.qname(), called.args, n_implicit_parameters\n    else:\n        return None"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_bound_parameters",
      "name": "_bound_parameters",
      "qname": "package_parser.commands.find_usages._ast_visitor._bound_parameters",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_bound_parameters/parameters",
          "name": "parameters",
          "qname": "package_parser.commands.find_usages._ast_visitor._bound_parameters.parameters",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_bound_parameters/arguments",
          "name": "arguments",
          "qname": "package_parser.commands.find_usages._ast_visitor._bound_parameters.arguments",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_bound_parameters/n_implicit_parameters",
          "name": "n_implicit_parameters",
          "qname": "package_parser.commands.find_usages._ast_visitor._bound_parameters.n_implicit_parameters",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def _bound_parameters(\n    parameters: astroid.Arguments, arguments: CallSite, n_implicit_parameters: int\n) -> Optional[dict[str, astroid.NodeNG]]:\n    # Improper call\n    if (\n        parameters.args is None\n        or arguments.has_invalid_arguments()\n        or arguments.has_invalid_keywords()\n    ):\n        return None\n\n    result: dict[str, astroid.NodeNG] = arguments.keyword_arguments.copy()\n\n    positional_parameter_names = [\n        it.name for it in (parameters.posonlyargs + parameters.args)\n    ][n_implicit_parameters:]\n\n    for index, arg in enumerate(arguments.positional_arguments):\n        if index >= len(positional_parameter_names):\n            break\n\n        result[positional_parameter_names[index]] = arg\n\n    return result"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_stringify_value",
      "name": "_stringify_value",
      "qname": "package_parser.commands.find_usages._ast_visitor._stringify_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._ast_visitor/_stringify_value/value",
          "name": "value",
          "qname": "package_parser.commands.find_usages._ast_visitor._stringify_value.value",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def _stringify_value(value: astroid.NodeNG):\n    return value.as_string()"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._find_usages/__find_usages_in_single_file",
      "name": "__find_usages_in_single_file",
      "qname": "package_parser.commands.find_usages._find_usages.__find_usages_in_single_file",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__find_usages_in_single_file/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.find_usages._find_usages.__find_usages_in_single_file.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__find_usages_in_single_file/python_file",
          "name": "python_file",
          "qname": "package_parser.commands.find_usages._find_usages.__find_usages_in_single_file.python_file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__find_usages_in_single_file/exclude_file",
          "name": "exclude_file",
          "qname": "package_parser.commands.find_usages._find_usages.__find_usages_in_single_file.exclude_file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__find_usages_in_single_file/tmp_dir",
          "name": "tmp_dir",
          "qname": "package_parser.commands.find_usages._find_usages.__find_usages_in_single_file.tmp_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __find_usages_in_single_file(\n    package_name: str,\n    python_file: str,\n    exclude_file: Path,\n    tmp_dir: Path,\n):\n    print(f\"Working on {python_file}\")\n\n    try:\n        with open(python_file, \"r\") as f:\n            source = f.read()\n\n        if __is_relevant_python_file(package_name, source):\n            usage_finder = _UsageFinder(package_name, python_file)\n            ASTWalker(usage_finder).walk(astroid.parse(source))\n\n            tmp_file = tmp_dir.joinpath(\n                python_file.replace(\"/\", \"__\")\n                .replace(\"\\\\\", \"__\")\n                .replace(\".py\", \".json\")\n            )\n            with tmp_file.open(\"w\") as f:\n                json.dump(usage_finder.usages.to_json(), f, indent=2)\n        else:\n            print(f\"Skipping {python_file} (irrelevant file)\")\n\n    except UnicodeError:\n        print(f\"Skipping {python_file} (broken encoding)\")\n    except astroid.exceptions.AstroidSyntaxError:\n        print(f\"Skipping {python_file} (invalid syntax)\")\n    except RecursionError:\n        print(f\"Skipping {python_file} (infinite recursion)\")\n\n    with _lock:\n        with exclude_file.open(\"a\") as f:\n            f.write(f\"{python_file}\\n\")"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._find_usages/__initialize_process_environment",
      "name": "__initialize_process_environment",
      "qname": "package_parser.commands.find_usages._find_usages.__initialize_process_environment",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__initialize_process_environment/lock",
          "name": "lock",
          "qname": "package_parser.commands.find_usages._find_usages.__initialize_process_environment.lock",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __initialize_process_environment(lock: synchronize.Lock):\n    global _lock\n    _lock = lock"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._find_usages/__is_relevant_python_file",
      "name": "__is_relevant_python_file",
      "qname": "package_parser.commands.find_usages._find_usages.__is_relevant_python_file",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__is_relevant_python_file/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.find_usages._find_usages.__is_relevant_python_file.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/__is_relevant_python_file/source_code",
          "name": "source_code",
          "qname": "package_parser.commands.find_usages._find_usages.__is_relevant_python_file.source_code",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __is_relevant_python_file(package_name: str, source_code: str) -> bool:\n    return package_name in source_code"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._find_usages/_merge_results",
      "name": "_merge_results",
      "qname": "package_parser.commands.find_usages._find_usages._merge_results",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/_merge_results/tmp_dir",
          "name": "tmp_dir",
          "qname": "package_parser.commands.find_usages._find_usages._merge_results.tmp_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def _merge_results(tmp_dir: Path) -> UsageStore:\n    result = UsageStore()\n\n    files = list_files(tmp_dir, \".json\")\n    for index, file in enumerate(files):\n        print(f\"Merging {file} ({index + 1}/{len(files)})\")\n\n        with open(file, \"r\") as f:\n            other_usage_store = UsageStore.from_json(json.load(f))\n            result.merge_other_into_self(other_usage_store)\n\n    return result"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._find_usages/find_usages",
      "name": "find_usages",
      "qname": "package_parser.commands.find_usages._find_usages.find_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/find_usages/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.find_usages._find_usages.find_usages.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/find_usages/src_dir",
          "name": "src_dir",
          "qname": "package_parser.commands.find_usages._find_usages.find_usages.src_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._find_usages/find_usages/tmp_dir",
          "name": "tmp_dir",
          "qname": "package_parser.commands.find_usages._find_usages.find_usages.tmp_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def find_usages(package_name: str, src_dir: Path, tmp_dir: Path):\n    candidate_python_files = list_files(src_dir, \".py\")\n\n    exclude_file = tmp_dir.joinpath(\"$$$$$exclude$$$$$.txt\")\n    excluded_python_files = set(initialize_and_read_exclude_file(exclude_file))\n\n    python_files = [\n        it for it in candidate_python_files if it not in excluded_python_files\n    ]\n\n    tmp_dir.mkdir(parents=True, exist_ok=True)\n\n    lock = multiprocessing.Lock()\n    with multiprocessing.Pool(\n        processes=__N_PROCESSES,\n        initializer=__initialize_process_environment,\n        initargs=(lock,),\n    ) as pool:\n        pool.starmap(\n            __find_usages_in_single_file,\n            [[package_name, it, exclude_file, tmp_dir] for it in python_files],\n        )\n    pool.join()\n    pool.close()\n\n    return _merge_results(tmp_dir)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._model.ClassUsage.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.ClassUsage.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage/__init__/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.ClassUsage.__init__.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage/__init__/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.ClassUsage.__init__.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, qname: ClassQName, location: Location) -> None:\n        self.qname: ClassQName = qname\n        self.location: Location = location"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.find_usages._model.ClassUsage.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ClassUsage/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.ClassUsage.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"qname\": self.qname, \"location\": self.location.to_json()}"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._model.FunctionUsage.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.FunctionUsage.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/__init__/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.FunctionUsage.__init__.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/__init__/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.FunctionUsage.__init__.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, qname: FunctionQName, location: Location) -> None:\n        self.qname: FunctionQName = qname\n        self.location: Location = location"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.find_usages._model.FunctionUsage.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/FunctionUsage/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.FunctionUsage.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"qname\": self.qname, \"location\": self.location.to_json()}"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location/__eq__",
      "name": "__eq__",
      "qname": "package_parser.commands.find_usages._model.Location.__eq__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__eq__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.Location.__eq__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__eq__/other",
          "name": "other",
          "qname": "package_parser.commands.find_usages._model.Location.__eq__.other",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, type(self)):\n            return NotImplemented\n        return (\n            self.file == other.file\n            and self.line == other.line\n            and self.column == other.column\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location/__hash__",
      "name": "__hash__",
      "qname": "package_parser.commands.find_usages._model.Location.__hash__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__hash__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.Location.__hash__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __hash__(self) -> int:\n        return hash((self.file, self.line, self.column))"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._model.Location.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.Location.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__init__/file",
          "name": "file",
          "qname": "package_parser.commands.find_usages._model.Location.__init__.file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__init__/line",
          "name": "line",
          "qname": "package_parser.commands.find_usages._model.Location.__init__.line",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__init__/column",
          "name": "column",
          "qname": "package_parser.commands.find_usages._model.Location.__init__.column",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(\n        self, file: FileName, line: Optional[LineNumber], column: Optional[ColumnNumber]\n    ) -> None:\n        self.file: FileName = file\n        self.line: Optional[LineNumber] = line\n        self.column: Optional[ColumnNumber] = column"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location/__repr__",
      "name": "__repr__",
      "qname": "package_parser.commands.find_usages._model.Location.__repr__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/__repr__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.Location.__repr__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __repr__(self) -> str:\n        return f\"{self.file}@{self.line}:{self.column}\""
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.find_usages._model.Location.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.find_usages._model.Location.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> Location:\n        return Location(json[\"file\"], json[\"line\"], json[\"column\"])"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/Location/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.find_usages._model.Location.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/Location/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.Location.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"file\": self.file, \"line\": self.line, \"column\": self.column}"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._model.ParameterUsage.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.ParameterUsage.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/__init__/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.ParameterUsage.__init__.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/__init__/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.ParameterUsage.__init__.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, qname: ParameterQName, location: Location) -> None:\n        self.qname: ParameterQName = qname\n        self.location: Location = location"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.find_usages._model.ParameterUsage.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ParameterUsage/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.ParameterUsage.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"qname\": self.qname, \"location\": self.location.to_json()}"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._model.UsageStore.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self) -> None:\n        self.class_usages: dict[ClassQName, list[ClassUsage]] = {}\n        self.function_usages: dict[FunctionQName, list[FunctionUsage]] = {}\n        self.parameter_usages: dict[ParameterQName, list[ParameterUsage]] = {}\n        self.value_usages: dict[\n            ParameterQName, dict[StringifiedValue, list[ValueUsage]]\n        ] = {}"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_class_usage",
      "name": "add_class_usage",
      "qname": "package_parser.commands.find_usages._model.UsageStore.add_class_usage",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_class_usage/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_class_usage.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_class_usage/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_class_usage.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_class_usage/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_class_usage.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_class_usage(self, qname: ClassQName, location: Location) -> None:\n        self.init_class(qname)\n        self.class_usages[qname].append(ClassUsage(qname, location))"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_function_usage",
      "name": "add_function_usage",
      "qname": "package_parser.commands.find_usages._model.UsageStore.add_function_usage",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_function_usage/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_function_usage.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_function_usage/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_function_usage.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_function_usage/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_function_usage.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_function_usage(self, qname: FunctionQName, location: Location) -> None:\n        self.init_function(qname)\n        self.function_usages[qname].append(FunctionUsage(qname, location))"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_parameter_usage",
      "name": "add_parameter_usage",
      "qname": "package_parser.commands.find_usages._model.UsageStore.add_parameter_usage",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_parameter_usage/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_parameter_usage.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_parameter_usage/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_parameter_usage.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_parameter_usage/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_parameter_usage.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_parameter_usage(self, qname: ParameterQName, location: Location) -> None:\n        self.init_parameter(qname)\n        self.parameter_usages[qname].append(ParameterUsage(qname, location))"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_value_usage",
      "name": "add_value_usage",
      "qname": "package_parser.commands.find_usages._model.UsageStore.add_value_usage",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_value_usage/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_value_usage.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_value_usage/parameter_qname",
          "name": "parameter_qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_value_usage.parameter_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_value_usage/value",
          "name": "value",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_value_usage.value",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/add_value_usage/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.UsageStore.add_value_usage.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_value_usage(\n        self,\n        parameter_qname: ParameterQName,\n        value: StringifiedValue,\n        location: Location,\n    ) -> None:\n        self.init_value(parameter_qname)\n\n        if value not in self.value_usages[parameter_qname]:\n            self.value_usages[parameter_qname][value] = []\n\n        self.value_usages[parameter_qname][value].append(\n            ValueUsage(parameter_qname, value, location)\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.find_usages._model.UsageStore.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.find_usages._model.UsageStore.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> UsageStore:\n        result = UsageStore()\n\n        # Revive class usages\n        class_usages = json[\"class_usages\"]\n        for qname, locations in class_usages.items():\n            for location in locations:\n                result.add_class_usage(qname, Location.from_json(location))\n\n        # Revive function usages\n        function_usages = json[\"function_usages\"]\n        for qname, locations in function_usages.items():\n            for location in locations:\n                result.add_function_usage(qname, Location.from_json(location))\n\n        # Revive parameter usages\n        parameter_usages = json[\"parameter_usages\"]\n        for qname, locations in parameter_usages.items():\n            for location in locations:\n                result.add_parameter_usage(qname, Location.from_json(location))\n\n        # Revive value usages\n        value_usages = json[\"value_usages\"]\n        for parameter_qname, values in value_usages.items():\n            for value, locations in values.items():\n                for location in locations:\n                    result.add_value_usage(\n                        parameter_qname, value, Location.from_json(location)\n                    )\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_class",
      "name": "init_class",
      "qname": "package_parser.commands.find_usages._model.UsageStore.init_class",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_class/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_class.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_class/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_class.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def init_class(self, qname: ClassQName) -> None:\n        if qname not in self.class_usages:\n            self.class_usages[qname] = []"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_function",
      "name": "init_function",
      "qname": "package_parser.commands.find_usages._model.UsageStore.init_function",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_function/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_function.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_function/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_function.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def init_function(self, qname: FunctionQName) -> None:\n        if qname not in self.function_usages:\n            self.function_usages[qname] = []"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_parameter",
      "name": "init_parameter",
      "qname": "package_parser.commands.find_usages._model.UsageStore.init_parameter",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_parameter/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_parameter.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_parameter/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_parameter.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def init_parameter(self, qname: ParameterQName) -> None:\n        if qname not in self.parameter_usages:\n            self.parameter_usages[qname] = []"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_value",
      "name": "init_value",
      "qname": "package_parser.commands.find_usages._model.UsageStore.init_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_value/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_value.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/init_value/parameter_qname",
          "name": "parameter_qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.init_value.parameter_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def init_value(self, parameter_qname: ParameterQName) -> None:\n        if parameter_qname not in self.value_usages:\n            self.value_usages[parameter_qname] = {}"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/merge_other_into_self",
      "name": "merge_other_into_self",
      "qname": "package_parser.commands.find_usages._model.UsageStore.merge_other_into_self",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/merge_other_into_self/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.merge_other_into_self.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/merge_other_into_self/other_usage_store",
          "name": "other_usage_store",
          "qname": "package_parser.commands.find_usages._model.UsageStore.merge_other_into_self.other_usage_store",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Merges the other usage store into this one **in-place** and returns this store.\n\n:param other_usage_store: The usage store to merge into this one.\n:return: This usage store.",
      "docstring": "Merges the other usage store into this one **in-place** and returns this store.\n\n:param other_usage_store: The usage store to merge into this one.\n:return: This usage store.",
      "code": "    def merge_other_into_self(self, other_usage_store: UsageStore) -> UsageStore:\n        \"\"\"\n        Merges the other usage store into this one **in-place** and returns this store.\n\n        :param other_usage_store: The usage store to merge into this one.\n        :return: This usage store.\n        \"\"\"\n\n        # Merge class usages\n        for class_usages in other_usage_store.class_usages.values():\n            for class_usage in class_usages:\n                self.add_class_usage(class_usage.qname, class_usage.location)\n\n        # Merge function usages\n        for function_usages in other_usage_store.function_usages.values():\n            for function_usage in function_usages:\n                self.add_function_usage(function_usage.qname, function_usage.location)\n\n        # Merge parameter usages\n        for parameter_usages in other_usage_store.parameter_usages.values():\n            for parameter_usage in parameter_usages:\n                self.add_parameter_usage(\n                    parameter_usage.qname, parameter_usage.location\n                )\n\n        # Merge value usages\n        for value_usages in other_usage_store.value_usages.values():\n            for value_usages_of_parameter in value_usages.values():\n                for value_usage_of_parameter in value_usages_of_parameter:\n                    self.add_value_usage(\n                        value_usage_of_parameter.parameter_qname,\n                        value_usage_of_parameter.value,\n                        value_usage_of_parameter.location,\n                    )\n\n        return self"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/most_common_value",
      "name": "most_common_value",
      "qname": "package_parser.commands.find_usages._model.UsageStore.most_common_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/most_common_value/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.most_common_value.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/most_common_value/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.most_common_value.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def most_common_value(self, qname: ParameterQName) -> Optional[str]:\n        if qname not in self.value_usages:\n            return None\n\n        result = None\n        count = 0\n\n        for value, usages in self.value_usages[qname].items():\n            if len(usages) > count:\n                result = value\n                count = len(usages)\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_class_usages",
      "name": "n_class_usages",
      "qname": "package_parser.commands.find_usages._model.UsageStore.n_class_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_class_usages/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_class_usages.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_class_usages/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_class_usages.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def n_class_usages(self, qname: ClassQName) -> int:\n        if qname in self.class_usages:\n            return len(self.class_usages[qname])\n\n        return 0"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_function_usages",
      "name": "n_function_usages",
      "qname": "package_parser.commands.find_usages._model.UsageStore.n_function_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_function_usages/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_function_usages.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_function_usages/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_function_usages.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def n_function_usages(self, qname: FunctionQName) -> int:\n        if qname in self.function_usages:\n            return len(self.function_usages[qname])\n\n        return 0"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_parameter_usages",
      "name": "n_parameter_usages",
      "qname": "package_parser.commands.find_usages._model.UsageStore.n_parameter_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_parameter_usages/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_parameter_usages.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_parameter_usages/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_parameter_usages.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def n_parameter_usages(self, qname: ParameterQName) -> int:\n        if qname in self.parameter_usages:\n            return len(self.parameter_usages[qname])\n\n        return 0"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_value_usages",
      "name": "n_value_usages",
      "qname": "package_parser.commands.find_usages._model.UsageStore.n_value_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_value_usages/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_value_usages.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_value_usages/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_value_usages.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/n_value_usages/value",
          "name": "value",
          "qname": "package_parser.commands.find_usages._model.UsageStore.n_value_usages.value",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def n_value_usages(self, qname: ParameterQName, value: str) -> int:\n        if qname in self.value_usages and value in self.value_usages[qname]:\n            return len(self.value_usages[qname][value])\n\n        return 0"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_class",
      "name": "remove_class",
      "qname": "package_parser.commands.find_usages._model.UsageStore.remove_class",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_class/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_class.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_class/class_qname",
          "name": "class_qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_class.class_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def remove_class(self, class_qname: ClassQName) -> None:\n        if class_qname in self.class_usages:\n            del self.class_usages[class_qname]\n\n        for function_qname in list(self.function_usages.keys()):\n            if function_qname.startswith(class_qname):\n                self.remove_function(function_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_function",
      "name": "remove_function",
      "qname": "package_parser.commands.find_usages._model.UsageStore.remove_function",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_function/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_function.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_function/function_qname",
          "name": "function_qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_function.function_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def remove_function(self, function_qname: FunctionQName) -> None:\n        if function_qname in self.function_usages:\n            del self.function_usages[function_qname]\n\n        for parameter_qname in list(self.parameter_usages.keys()):\n            if parameter_qname.startswith(function_qname):\n                self.remove_parameter(parameter_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_parameter",
      "name": "remove_parameter",
      "qname": "package_parser.commands.find_usages._model.UsageStore.remove_parameter",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_parameter/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_parameter.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_parameter/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_parameter.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def remove_parameter(self, qname: ParameterQName) -> None:\n        if qname in self.parameter_usages:\n            del self.parameter_usages[qname]\n\n        self.remove_value(qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_value",
      "name": "remove_value",
      "qname": "package_parser.commands.find_usages._model.UsageStore.remove_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_value/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_value.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/remove_value/qname",
          "name": "qname",
          "qname": "package_parser.commands.find_usages._model.UsageStore.remove_value.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def remove_value(self, qname: ParameterQName) -> None:\n        if qname in self.value_usages:\n            del self.value_usages[qname]"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/to_count_json",
      "name": "to_count_json",
      "qname": "package_parser.commands.find_usages._model.UsageStore.to_count_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/to_count_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.to_count_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_count_json(self) -> Any:\n        return {\n            \"class_counts\": {\n                qname: len(usages)\n                for qname, usages in sorted(\n                    self.class_usages.items(),\n                    key=lambda item: len(item[1]),\n                    reverse=True,\n                )\n            },\n            \"function_counts\": {\n                qname: len(usages)\n                for qname, usages in sorted(\n                    self.function_usages.items(),\n                    key=lambda item: len(item[1]),\n                    reverse=True,\n                )\n            },\n            \"parameter_counts\": {\n                qname: len(usages)\n                for qname, usages in sorted(\n                    self.parameter_usages.items(),\n                    key=lambda item: len(item[1]),\n                    reverse=True,\n                )\n            },\n            \"value_counts\": {\n                parameter_qname: {\n                    value: len(usages)\n                    for value, usages in sorted(\n                        values.items(), key=lambda item: len(item[1]), reverse=True\n                    )\n                }\n                for parameter_qname, values in self.value_usages.items()\n            },\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.find_usages._model.UsageStore.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/UsageStore/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.UsageStore.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"class_usages\": {\n                qname: [usage.location.to_json() for usage in usages]\n                for qname, usages in self.class_usages.items()\n            },\n            \"function_usages\": {\n                qname: [usage.location.to_json() for usage in usages]\n                for qname, usages in self.function_usages.items()\n            },\n            \"parameter_usages\": {\n                qname: [usage.location.to_json() for usage in usages]\n                for qname, usages in self.parameter_usages.items()\n            },\n            \"value_usages\": {\n                parameter_qname: {\n                    value: [usage.location.to_json() for usage in usages]\n                    for value, usages in values.items()\n                }\n                for parameter_qname, values in self.value_usages.items()\n            },\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.find_usages._model.ValueUsage.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.ValueUsage.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/__init__/parameter_qname",
          "name": "parameter_qname",
          "qname": "package_parser.commands.find_usages._model.ValueUsage.__init__.parameter_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/__init__/value",
          "name": "value",
          "qname": "package_parser.commands.find_usages._model.ValueUsage.__init__.value",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/__init__/location",
          "name": "location",
          "qname": "package_parser.commands.find_usages._model.ValueUsage.__init__.location",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(\n        self,\n        parameter_qname: ParameterQName,\n        value: StringifiedValue,\n        location: Location,\n    ) -> None:\n        self.parameter_qname: ParameterQName = parameter_qname\n        self.value: StringifiedValue = value\n        self.location: Location = location"
    },
    {
      "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.find_usages._model.ValueUsage.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.find_usages._model/ValueUsage/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.find_usages._model.ValueUsage.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"parameter_qname\": self.parameter_qname,\n            \"value\": self.value,\n            \"location\": self.location.to_json(),\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__description",
      "name": "__description",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__description",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__description/numpydoc",
          "name": "numpydoc",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__description.numpydoc",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def __description(numpydoc: NumpyDocString) -> str:\n        has_summary = \"Summary\" in numpydoc and len(numpydoc[\"Summary\"]) > 0\n        has_extended_summary = (\n            \"Extended Summary\" in numpydoc and len(numpydoc[\"Extended Summary\"]) > 0\n        )\n\n        result = \"\"\n        if has_summary:\n            result += \"\\n\".join(numpydoc[\"Summary\"])\n        if has_summary and has_extended_summary:\n            result += \"\\n\\n\"\n        if has_extended_summary:\n            result += \"\\n\".join(numpydoc[\"Extended Summary\"])\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__function_parameters",
      "name": "__function_parameters",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__function_parameters",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__function_parameters/node",
          "name": "node",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__function_parameters.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__function_parameters/function_is_public",
          "name": "function_is_public",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__function_parameters.function_is_public",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def __function_parameters(\n        node: astroid.FunctionDef, function_is_public: bool\n    ) -> list[Parameter]:\n        parameters = node.args\n        n_implicit_parameters = node.implicit_parameters()\n\n        # For constructors (__init__ functions) the parameters are described on the class\n        if node.name == \"__init__\" and isinstance(node.parent, astroid.ClassDef):\n            docstring = node.parent.doc\n        else:\n            docstring = node.doc\n        function_numpydoc = NumpyDocString(inspect.cleandoc(docstring or \"\"))\n\n        # Arguments that can be specified positionally only ( f(1) works but not f(x=1) )\n        result = [\n            Parameter(\n                it.name,\n                default_value=None,\n                is_public=function_is_public,\n                assigned_by=ParameterAssignment.POSITION_ONLY,\n                docstring=_AstVisitor.__parameter_docstring(function_numpydoc, it.name),\n            )\n            for it in parameters.posonlyargs\n        ]\n\n        # Arguments that can be specified positionally or by name ( f(1) and f(x=1) both work )\n        result += [\n            Parameter(\n                it.name,\n                _AstVisitor.__parameter_default(\n                    parameters.defaults,\n                    index - len(parameters.args) + len(parameters.defaults),\n                ),\n                function_is_public,\n                ParameterAssignment.POSITION_OR_NAME,\n                _AstVisitor.__parameter_docstring(function_numpydoc, it.name),\n            )\n            for index, it in enumerate(parameters.args)\n        ]\n\n        # Arguments that can be specified by name only ( f(x=1) works but not f(1) )\n        result += [\n            Parameter(\n                it.name,\n                _AstVisitor.__parameter_default(\n                    parameters.kw_defaults,\n                    index - len(parameters.kwonlyargs) + len(parameters.kw_defaults),\n                ),\n                function_is_public,\n                ParameterAssignment.NAME_ONLY,\n                _AstVisitor.__parameter_docstring(function_numpydoc, it.name),\n            )\n            for index, it in enumerate(parameters.kwonlyargs)\n        ]\n\n        return result[n_implicit_parameters:]"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__init__/api",
          "name": "api",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__init__.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, api: API) -> None:\n        self.reexported: set[str] = set()\n        self.api: API = api\n        self.__declaration_stack: list[Union[Module, Class, Function]] = []"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_default",
      "name": "__parameter_default",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__parameter_default",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_default/defaults",
          "name": "defaults",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__parameter_default.defaults",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_default/default_index",
          "name": "default_index",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__parameter_default.default_index",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def __parameter_default(\n        defaults: list[astroid.NodeNG], default_index: int\n    ) -> Optional[str]:\n        if 0 <= default_index < len(defaults):\n            default = defaults[default_index]\n            if default is None:\n                return None\n            return default.as_string()\n        else:\n            return None"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_docstring",
      "name": "__parameter_docstring",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__parameter_docstring",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_docstring/function_numpydoc",
          "name": "function_numpydoc",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__parameter_docstring.function_numpydoc",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/__parameter_docstring/parameter_name",
          "name": "parameter_name",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.__parameter_docstring.parameter_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def __parameter_docstring(\n        function_numpydoc: NumpyDocString, parameter_name: str\n    ) -> ParameterAndResultDocstring:\n        parameters_numpydoc = function_numpydoc[\"Parameters\"]\n        candidate_parameters_numpydoc = [\n            it for it in parameters_numpydoc if it.name == parameter_name\n        ]\n\n        if len(candidate_parameters_numpydoc) > 0:\n            last_parameter_numpydoc = candidate_parameters_numpydoc[-1]\n            return ParameterAndResultDocstring(\n                last_parameter_numpydoc.type, \"\\n\".join(last_parameter_numpydoc.desc)\n            )\n\n        return ParameterAndResultDocstring(\"\", \"\")"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_classdef",
      "name": "enter_classdef",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_classdef",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_classdef/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_classdef.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_classdef/class_node",
          "name": "class_node",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_classdef.class_node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def enter_classdef(self, class_node: astroid.ClassDef) -> None:\n        qname = class_node.qname()\n\n        decorators: Optional[astroid.Decorators] = class_node.decorators\n        if decorators is not None:\n            decorator_names = [decorator.as_string() for decorator in decorators.nodes]\n        else:\n            decorator_names = []\n\n        numpydoc = NumpyDocString(inspect.cleandoc(class_node.doc or \"\"))\n\n        # Remember class, so we can later add methods\n        class_ = Class(\n            qname,\n            decorator_names,\n            class_node.basenames,\n            self.is_public(class_node.name, qname),\n            _AstVisitor.__description(numpydoc),\n            class_node.doc,\n            class_node.as_string(),\n        )\n        self.__declaration_stack.append(class_)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_functiondef",
      "name": "enter_functiondef",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_functiondef",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_functiondef/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_functiondef.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_functiondef/function_node",
          "name": "function_node",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_functiondef.function_node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def enter_functiondef(self, function_node: astroid.FunctionDef) -> None:\n        qname = function_node.qname()\n\n        decorators: Optional[astroid.Decorators] = function_node.decorators\n        if decorators is not None:\n            decorator_names = [decorator.as_string() for decorator in decorators.nodes]\n        else:\n            decorator_names = []\n\n        numpydoc = NumpyDocString(inspect.cleandoc(function_node.doc or \"\"))\n        is_public = self.is_public(function_node.name, qname)\n\n        function = Function(\n            qname,\n            decorator_names,\n            self.__function_parameters(function_node, is_public),\n            [],  # TODO: results\n            is_public,\n            _AstVisitor.__description(numpydoc),\n            function_node.doc,\n            function_node.as_string(),\n        )\n        self.__declaration_stack.append(function)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_module",
      "name": "enter_module",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_module",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_module/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_module.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/enter_module/module_node",
          "name": "module_node",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.enter_module.module_node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def enter_module(self, module_node: astroid.Module):\n        imports: list[Import] = []\n        from_imports: list[FromImport] = []\n        visited_global_nodes: set[astroid.NodeNG] = set()\n\n        for _, global_node_list in module_node.globals.items():\n            global_node = global_node_list[0]\n\n            # For some reason from-imports get visited as often as there are imported names, leading to duplicates\n            if global_node in visited_global_nodes:\n                continue\n            visited_global_nodes.add(global_node)\n\n            # import X as Y\n            if isinstance(global_node, astroid.Import):\n                for (name, alias) in global_node.names:\n                    imports.append(Import(name, alias))\n\n            # from X import a as b\n            if isinstance(global_node, astroid.ImportFrom):\n                base_import_path = module_node.relative_to_absolute_name(\n                    global_node.modname, global_node.level\n                )\n\n                for (name, alias) in global_node.names:\n                    from_imports.append(FromImport(base_import_path, name, alias))\n\n                # Find re-exported declarations in __init__.py files\n                if _is_init_file(module_node.file):\n                    for declaration, _ in global_node.names:\n                        reexported_name = f\"{base_import_path}.{declaration}\"\n\n                        if reexported_name.startswith(module_node.name):\n                            self.reexported.add(reexported_name)\n\n        # Remember module, so we can later add classes and global functions\n        module = Module(\n            module_node.qname(),\n            imports,\n            from_imports,\n        )\n        self.__declaration_stack.append(module)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/is_public",
      "name": "is_public",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.is_public",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/is_public/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.is_public.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/is_public/name",
          "name": "name",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.is_public.name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/is_public/qualified_name",
          "name": "qualified_name",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.is_public.qualified_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def is_public(self, name: str, qualified_name: str) -> bool:\n        if name.startswith(\"_\") and not name.endswith(\"__\"):\n            return False\n\n        if qualified_name in self.reexported:\n            return True\n\n        # Containing class is re-exported (always false if the current API element is not a method)\n        if parent_qname(qualified_name) in self.reexported:\n            return True\n\n        # The slicing is necessary so __init__ functions are not excluded (already handled in the first condition).\n        return all(not it.startswith(\"_\") for it in qualified_name.split(\".\")[:-1])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_classdef",
      "name": "leave_classdef",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_classdef",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_classdef/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_classdef.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_classdef/_",
          "name": "_",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_classdef._",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def leave_classdef(self, _: astroid.ClassDef) -> None:\n        class_ = self.__declaration_stack.pop()\n        if not isinstance(class_, Class):\n            raise AssertionError(\"Imbalanced push/pop on stack\")\n\n        if len(self.__declaration_stack) > 0:\n            parent = self.__declaration_stack[-1]\n\n            # Ignore nested classes for now\n            if isinstance(parent, Module):\n                self.api.add_class(class_)\n                parent.add_class(class_.qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_functiondef",
      "name": "leave_functiondef",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_functiondef",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_functiondef/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_functiondef.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_functiondef/_",
          "name": "_",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_functiondef._",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def leave_functiondef(self, _: astroid.FunctionDef) -> None:\n        function = self.__declaration_stack.pop()\n        if not isinstance(function, Function):\n            raise AssertionError(\"Imbalanced push/pop on stack\")\n\n        if len(self.__declaration_stack) > 0:\n            parent = self.__declaration_stack[-1]\n\n            # Ignore nested functions for now\n            if isinstance(parent, Module):\n                self.api.add_function(function)\n                parent.add_function(function.unique_qname)\n            elif isinstance(parent, Class):\n                self.api.add_function(function)\n                parent.add_method(function.unique_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_module",
      "name": "leave_module",
      "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_module",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_module/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_module.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._ast_visitor/_AstVisitor/leave_module/_",
          "name": "_",
          "qname": "package_parser.commands.get_api._ast_visitor._AstVisitor.leave_module._",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def leave_module(self, _: astroid.Module) -> None:\n        module = self.__declaration_stack.pop()\n        if not isinstance(module, Module):\n            raise AssertionError(\"Imbalanced push/pop on stack\")\n\n        self.api.add_module(module)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._file_filters/_is_init_file",
      "name": "_is_init_file",
      "qname": "package_parser.commands.get_api._file_filters._is_init_file",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._file_filters/_is_init_file/path",
          "name": "path",
          "qname": "package_parser.commands.get_api._file_filters._is_init_file.path",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def _is_init_file(path: str) -> bool:\n    return path.endswith(\"__init__.py\")"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._file_filters/_is_test_file",
      "name": "_is_test_file",
      "qname": "package_parser.commands.get_api._file_filters._is_test_file",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._file_filters/_is_test_file/posix_path",
          "name": "posix_path",
          "qname": "package_parser.commands.get_api._file_filters._is_test_file.posix_path",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def _is_test_file(posix_path: str) -> bool:\n    return \"/test/\" in posix_path or \"/tests/\" in posix_path"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._get_api/__module_name",
      "name": "__module_name",
      "qname": "package_parser.commands.get_api._get_api.__module_name",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._get_api/__module_name/root",
          "name": "root",
          "qname": "package_parser.commands.get_api._get_api.__module_name.root",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._get_api/__module_name/file",
          "name": "file",
          "qname": "package_parser.commands.get_api._get_api.__module_name.file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __module_name(root: Path, file: Path) -> str:\n    relative_path = file.relative_to(root.parent).as_posix()\n    return str(relative_path).replace(\".py\", \"\").replace(\"/\", \".\")"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._get_api/get_api",
      "name": "get_api",
      "qname": "package_parser.commands.get_api._get_api.get_api",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._get_api/get_api/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.get_api._get_api.get_api.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def get_api(package_name: str) -> API:\n    root = package_root(package_name)\n    dist = distribution(package_name) or \"\"\n    dist_version = distribution_version(dist) or \"\"\n    files = package_files(package_name)\n\n    api = API(dist, package_name, dist_version)\n    callable_visitor = _AstVisitor(api)\n    walker = ASTWalker(callable_visitor)\n\n    for file in files:\n        posix_path = Path(file).as_posix()\n        print(f\"Working on file {posix_path}\")\n\n        if _is_test_file(posix_path):\n            print(\"Skipping test file\")\n            continue\n\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            source = f.read()\n            walker.walk(\n                astroid.parse(\n                    source, module_name=__module_name(root, Path(file)), path=file\n                )\n            )\n\n    return callable_visitor.api"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.API.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/__init__/distribution",
          "name": "distribution",
          "qname": "package_parser.commands.get_api._model.API.__init__.distribution",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/__init__/package",
          "name": "package",
          "qname": "package_parser.commands.get_api._model.API.__init__.package",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/__init__/version",
          "name": "version",
          "qname": "package_parser.commands.get_api._model.API.__init__.version",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, distribution: str, package: str, version: str) -> None:\n        self.distribution: str = distribution\n        self.package: str = package\n        self.version: str = version\n        self.modules: dict[str, Module] = dict()\n        self.classes: dict[str, Class] = dict()\n        self.functions: dict[str, Function] = dict()"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/add_class",
      "name": "add_class",
      "qname": "package_parser.commands.get_api._model.API.add_class",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/add_class/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.add_class.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/add_class/class_",
          "name": "class_",
          "qname": "package_parser.commands.get_api._model.API.add_class.class_",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_class(self, class_: Class) -> None:\n        self.classes[class_.qname] = class_"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/add_function",
      "name": "add_function",
      "qname": "package_parser.commands.get_api._model.API.add_function",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/add_function/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.add_function.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/add_function/function",
          "name": "function",
          "qname": "package_parser.commands.get_api._model.API.add_function.function",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_function(self, function: Function) -> None:\n        self.functions[function.unique_qname] = function"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/add_module",
      "name": "add_module",
      "qname": "package_parser.commands.get_api._model.API.add_module",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/add_module/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.add_module.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/add_module/module",
          "name": "module",
          "qname": "package_parser.commands.get_api._model.API.add_module.module",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_module(self, module: Module) -> None:\n        self.modules[module.name] = module"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/class_count",
      "name": "class_count",
      "qname": "package_parser.commands.get_api._model.API.class_count",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/class_count/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.class_count.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def class_count(self) -> int:\n        return len(self.classes)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.API.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.API.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> API:\n        result = API(json[\"distribution\"], json[\"package\"], json[\"version\"])\n\n        for module_json in json[\"modules\"]:\n            result.add_module(Module.from_json(module_json))\n\n        for class_json in json[\"classes\"]:\n            result.add_class(Class.from_json(class_json))\n\n        for function_json in json[\"functions\"]:\n            result.add_function(Function.from_json(function_json))\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/function_count",
      "name": "function_count",
      "qname": "package_parser.commands.get_api._model.API.function_count",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/function_count/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.function_count.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def function_count(self) -> int:\n        return len(self.functions)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/get_default_value",
      "name": "get_default_value",
      "qname": "package_parser.commands.get_api._model.API.get_default_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/get_default_value/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.get_default_value.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/get_default_value/parameter_unique_qname",
          "name": "parameter_unique_qname",
          "qname": "package_parser.commands.get_api._model.API.get_default_value.parameter_unique_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def get_default_value(self, parameter_unique_qname: str) -> Optional[str]:\n        function_unique_qname = parent_qname(parameter_unique_qname)\n        parameter_name = declaration_qname_to_name(parameter_unique_qname)\n\n        if function_unique_qname not in self.functions:\n            return None\n\n        for parameter in self.functions[function_unique_qname].parameters:\n            if parameter.name == parameter_name:\n                return parameter.default_value\n\n        return None"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/is_public_class",
      "name": "is_public_class",
      "qname": "package_parser.commands.get_api._model.API.is_public_class",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/is_public_class/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.is_public_class.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/is_public_class/class_qname",
          "name": "class_qname",
          "qname": "package_parser.commands.get_api._model.API.is_public_class.class_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def is_public_class(self, class_qname: str) -> bool:\n        return class_qname in self.classes and self.classes[class_qname].is_public"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/is_public_function",
      "name": "is_public_function",
      "qname": "package_parser.commands.get_api._model.API.is_public_function",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/is_public_function/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.is_public_function.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/is_public_function/function_unique_qname",
          "name": "function_unique_qname",
          "qname": "package_parser.commands.get_api._model.API.is_public_function.function_unique_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def is_public_function(self, function_unique_qname: str) -> bool:\n        return (\n            function_unique_qname in self.functions\n            and self.functions[function_unique_qname].is_public\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/parameter_count",
      "name": "parameter_count",
      "qname": "package_parser.commands.get_api._model.API.parameter_count",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/parameter_count/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.parameter_count.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def parameter_count(self) -> int:\n        return len(self.parameters())"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/parameters",
      "name": "parameters",
      "qname": "package_parser.commands.get_api._model.API.parameters",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/parameters/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.parameters.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def parameters(self) -> dict[str, Parameter]:\n        result: dict[str, Parameter] = {}\n\n        for function in self.functions.values():\n            for parameter in function.parameters:\n                parameter_qname = f\"{function.qname}.{parameter.name}\"\n                result[parameter_qname] = parameter\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/public_class_count",
      "name": "public_class_count",
      "qname": "package_parser.commands.get_api._model.API.public_class_count",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/public_class_count/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.public_class_count.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def public_class_count(self) -> int:\n        return len([it for it in self.classes.values() if it.is_public])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/public_function_count",
      "name": "public_function_count",
      "qname": "package_parser.commands.get_api._model.API.public_function_count",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/public_function_count/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.public_function_count.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def public_function_count(self) -> int:\n        return len([it for it in self.functions.values() if it.is_public])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/public_parameter_count",
      "name": "public_parameter_count",
      "qname": "package_parser.commands.get_api._model.API.public_parameter_count",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/public_parameter_count/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.public_parameter_count.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def public_parameter_count(self) -> int:\n        return len([it for it in self.parameters().values() if it.is_public])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/API/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.API.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/API/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.API.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"distribution\": self.distribution,\n            \"package\": self.package,\n            \"version\": self.version,\n            \"modules\": [\n                module.to_json()\n                for module in sorted(self.modules.values(), key=lambda it: it.name)\n            ],\n            \"classes\": [\n                clazz.to_json()\n                for clazz in sorted(self.classes.values(), key=lambda it: it.qname)\n            ],\n            \"functions\": [\n                function.to_json()\n                for function in sorted(\n                    self.functions.values(), key=lambda it: it.unique_qname\n                )\n            ],\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/APIDependencies/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.APIDependencies.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/APIDependencies/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.APIDependencies.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Dict:\n        return {\n            function_name: {\n                parameter_name: [dependency.to_json() for dependency in dependencies]\n                for parameter_name, dependencies in parameter_name.items()\n            }\n            for function_name, parameter_name in self.dependencies.items()\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Action/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Action.from_json",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Action/from_json/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._model.Action.from_json.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Action/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Action.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_json(cls, json: Any):\n        return cls(json[\"action\"])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Action/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Action.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Action/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Action.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Dict:\n        return {\"action\": self.action}"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.Class.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Class.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/qname",
          "name": "qname",
          "qname": "package_parser.commands.get_api._model.Class.__init__.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/decorators",
          "name": "decorators",
          "qname": "package_parser.commands.get_api._model.Class.__init__.decorators",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/superclasses",
          "name": "superclasses",
          "qname": "package_parser.commands.get_api._model.Class.__init__.superclasses",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/is_public",
          "name": "is_public",
          "qname": "package_parser.commands.get_api._model.Class.__init__.is_public",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/description",
          "name": "description",
          "qname": "package_parser.commands.get_api._model.Class.__init__.description",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/docstring",
          "name": "docstring",
          "qname": "package_parser.commands.get_api._model.Class.__init__.docstring",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/__init__/source_code",
          "name": "source_code",
          "qname": "package_parser.commands.get_api._model.Class.__init__.source_code",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(\n        self,\n        qname: str,\n        decorators: list[str],\n        superclasses: list[str],\n        is_public: bool,\n        description: str,\n        docstring: str,\n        source_code: str,\n    ) -> None:\n        self.qname: str = qname\n        self.decorators: list[str] = decorators\n        self.superclasses: list[str] = superclasses\n        self.methods: list[str] = []\n        self.is_public: bool = is_public\n        self.description: str = description\n        self.docstring: str = docstring\n        self.source_code: str = source_code"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Class/add_method",
      "name": "add_method",
      "qname": "package_parser.commands.get_api._model.Class.add_method",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/add_method/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Class.add_method.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/add_method/method_unique_qname",
          "name": "method_unique_qname",
          "qname": "package_parser.commands.get_api._model.Class.add_method.method_unique_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_method(self, method_unique_qname: str) -> None:\n        self.methods.append(method_unique_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Class/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Class.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Class.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> Class:\n        result = Class(\n            json[\"qname\"],\n            json[\"decorators\"],\n            json[\"superclasses\"],\n            json[\"is_public\"],\n            json[\"description\"],\n            json[\"docstring\"],\n            json[\"source_code\"],\n        )\n\n        for method_unique_qname in json[\"methods\"]:\n            result.add_method(method_unique_qname)\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Class/name@getter",
      "name": "name",
      "qname": "package_parser.commands.get_api._model.Class.name",
      "decorators": [
        "property"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/name@getter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Class.name.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @property\n    def name(self) -> str:\n        return self.qname.split(\".\")[-1]"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Class/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Class.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Class/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Class.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"qname\": self.qname,\n            \"decorators\": self.decorators,\n            \"superclasses\": self.superclasses,\n            \"methods\": self.methods,\n            \"is_public\": self.is_public,\n            \"description\": self.description,\n            \"docstring\": self.docstring,\n            \"source_code\": self.source_code,\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Condition/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Condition.from_json",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Condition/from_json/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._model.Condition.from_json.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Condition/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Condition.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_json(cls, json: Any):\n        return cls(json[\"condition\"])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Condition/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Condition.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Condition/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Condition.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Dict:\n        return {\"condition\": self.condition}"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Dependency/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Dependency.from_json",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Dependency/from_json/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._model.Dependency.from_json.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Dependency/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Dependency.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_json(cls, json: Any):\n        return cls(\n            Parameter.from_json(json[\"hasDependentParameter\"]),\n            Parameter.from_json(json[\"isDependingOn\"]),\n            Condition.from_json(json[\"hasCondition\"]),\n            Action.from_json(json[\"hasAction\"]),\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Dependency/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Dependency.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Dependency/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Dependency.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Dict:\n        return {\n            \"hasDependentParameter\": self.hasDependentParameter.to_json(),\n            \"isDependingOn\": self.isDependingOn.to_json(),\n            \"hasCondition\": self.hasCondition.to_json(),\n            \"hasAction\": self.hasAction.to_json(),\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/FromImport/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.FromImport.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/FromImport/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.FromImport.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> FromImport:\n        return FromImport(json[\"module\"], json[\"declaration\"], json[\"alias\"])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/FromImport/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.FromImport.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/FromImport/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.FromImport.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"module\": self.module_name,\n            \"declaration\": self.declaration_name,\n            \"alias\": self.alias,\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Function.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Function.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> Function:\n        return Function(\n            json[\"qname\"],\n            json[\"decorators\"],\n            [\n                Parameter.from_json(parameter_json)\n                for parameter_json in json[\"parameters\"]\n            ],\n            [Result.from_json(result_json) for result_json in json[\"results\"]],\n            json[\"is_public\"],\n            json[\"description\"],\n            json[\"docstring\"],\n            json[\"source_code\"],\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/is_deleter",
      "name": "is_deleter",
      "qname": "package_parser.commands.get_api._model.Function.is_deleter",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/is_deleter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.is_deleter.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def is_deleter(self) -> bool:\n        for decorator in self.decorators:\n            if re.search(r\"^[^.]*.deleter$\", decorator):\n                return True\n\n        return False"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/is_getter",
      "name": "is_getter",
      "qname": "package_parser.commands.get_api._model.Function.is_getter",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/is_getter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.is_getter.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def is_getter(self) -> bool:\n        return \"property\" in self.decorators"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/is_setter",
      "name": "is_setter",
      "qname": "package_parser.commands.get_api._model.Function.is_setter",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/is_setter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.is_setter.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def is_setter(self) -> bool:\n        for decorator in self.decorators:\n            if re.search(r\"^[^.]*.setter$\", decorator):\n                return True\n\n        return False"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/name@getter",
      "name": "name",
      "qname": "package_parser.commands.get_api._model.Function.name",
      "decorators": [
        "property"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/name@getter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.name.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @property\n    def name(self) -> str:\n        return self.qname.split(\".\")[-1]"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Function.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"unique_name\": self.unique_name,\n            \"qname\": self.qname,\n            \"unique_qname\": self.unique_qname,\n            \"decorators\": self.decorators,\n            \"parameters\": [parameter.to_json() for parameter in self.parameters],\n            \"results\": [result.to_json() for result in self.results],\n            \"is_public\": self.is_public,\n            \"description\": self.description,\n            \"docstring\": self.docstring,\n            \"source_code\": self.source_code,\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/unique_name@getter",
      "name": "unique_name",
      "qname": "package_parser.commands.get_api._model.Function.unique_name",
      "decorators": [
        "property"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/unique_name@getter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.unique_name.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @property\n    def unique_name(self) -> str:\n        return self.unique_qname.split(\".\")[-1]"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Function/unique_qname@getter",
      "name": "unique_qname",
      "qname": "package_parser.commands.get_api._model.Function.unique_qname",
      "decorators": [
        "property"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Function/unique_qname@getter/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Function.unique_qname.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @property\n    def unique_qname(self) -> str:\n        result = self.qname\n\n        if self.is_getter():\n            result += \"@getter\"\n        elif self.is_setter():\n            result += \"@setter\"\n        elif self.is_deleter():\n            result += \"@deleter\"\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Import/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Import.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Import/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Import.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> Import:\n        return Import(json[\"module\"], json[\"alias\"])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Import/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Import.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Import/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Import.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"module\": self.module_name, \"alias\": self.alias}"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Module/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.Module.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Module.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/__init__/name",
          "name": "name",
          "qname": "package_parser.commands.get_api._model.Module.__init__.name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/__init__/imports",
          "name": "imports",
          "qname": "package_parser.commands.get_api._model.Module.__init__.imports",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/__init__/from_imports",
          "name": "from_imports",
          "qname": "package_parser.commands.get_api._model.Module.__init__.from_imports",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(\n        self, name: str, imports: list[Import], from_imports: list[FromImport]\n    ):\n        self.name: str = name\n        self.imports: list[Import] = imports\n        self.from_imports: list[FromImport] = from_imports\n        self.classes: list[str] = []\n        self.functions: list[str] = []"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Module/add_class",
      "name": "add_class",
      "qname": "package_parser.commands.get_api._model.Module.add_class",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/add_class/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Module.add_class.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/add_class/class_qname",
          "name": "class_qname",
          "qname": "package_parser.commands.get_api._model.Module.add_class.class_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_class(self, class_qname: str) -> None:\n        self.classes.append(class_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Module/add_function",
      "name": "add_function",
      "qname": "package_parser.commands.get_api._model.Module.add_function",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/add_function/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Module.add_function.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/add_function/function_unique_qname",
          "name": "function_unique_qname",
          "qname": "package_parser.commands.get_api._model.Module.add_function.function_unique_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def add_function(self, function_unique_qname: str) -> None:\n        self.functions.append(function_unique_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Module/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Module.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Module.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> Module:\n        result = Module(\n            json[\"name\"],\n            [Import.from_json(import_json) for import_json in json[\"imports\"]],\n            [\n                FromImport.from_json(from_import_json)\n                for from_import_json in json[\"from_imports\"]\n            ],\n        )\n\n        for class_qname in json[\"classes\"]:\n            result.add_class(class_qname)\n\n        for function_unique_qname in json[\"functions\"]:\n            result.add_function(function_unique_qname)\n\n        return result"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Module/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Module.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Module/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Module.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"imports\": [import_.to_json() for import_ in self.imports],\n            \"from_imports\": [\n                from_import.to_json() for from_import in self.from_imports\n            ],\n            \"classes\": self.classes,\n            \"functions\": self.functions,\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.Parameter.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Parameter.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__/name",
          "name": "name",
          "qname": "package_parser.commands.get_api._model.Parameter.__init__.name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__/default_value",
          "name": "default_value",
          "qname": "package_parser.commands.get_api._model.Parameter.__init__.default_value",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__/is_public",
          "name": "is_public",
          "qname": "package_parser.commands.get_api._model.Parameter.__init__.is_public",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__/assigned_by",
          "name": "assigned_by",
          "qname": "package_parser.commands.get_api._model.Parameter.__init__.assigned_by",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/__init__/docstring",
          "name": "docstring",
          "qname": "package_parser.commands.get_api._model.Parameter.__init__.docstring",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(\n        self,\n        name: str,\n        default_value: Optional[str],\n        is_public: bool,\n        assigned_by: ParameterAssignment,\n        docstring: ParameterAndResultDocstring,\n    ) -> None:\n        self.name: str = name\n        self.default_value: Optional[str] = default_value\n        self.is_public: bool = is_public\n        self.assigned_by: ParameterAssignment = assigned_by\n        self.docstring = docstring\n        self.refined_type: RefinedType = RefinedType.from_docstring(docstring)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Parameter/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Parameter.from_json",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/from_json/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._model.Parameter.from_json.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Parameter.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_json(cls, json: Any):\n        return cls(\n            json[\"name\"],\n            json[\"default_value\"],\n            json[\"is_public\"],\n            ParameterAssignment[json[\"assigned_by\"]],\n            ParameterAndResultDocstring.from_json(json[\"docstring\"]),\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Parameter/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Parameter.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Parameter/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Parameter.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\n            \"name\": self.name,\n            \"default_value\": self.default_value,\n            \"is_public\": self.is_public,\n            \"assigned_by\": self.assigned_by.name,\n            \"docstring\": self.docstring.to_json(),\n            \"refined_type\": self.refined_type.as_dict(),\n        }"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.ParameterAndResultDocstring.from_json",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/from_json/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._model.ParameterAndResultDocstring.from_json.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.ParameterAndResultDocstring.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_json(cls, json: Any):\n        return cls(json[\"type\"], json[\"description\"])"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.ParameterAndResultDocstring.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterAndResultDocstring/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.ParameterAndResultDocstring.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"type\": self.type, \"description\": self.description}"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterHasValue/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.ParameterHasValue.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterHasValue/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.ParameterHasValue.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterHasValue/__init__/condition",
          "name": "condition",
          "qname": "package_parser.commands.get_api._model.ParameterHasValue.__init__.condition",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, condition: str) -> None:\n        super().__init__(condition)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIgnored/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.ParameterIsIgnored.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIgnored/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.ParameterIsIgnored.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIgnored/__init__/action",
          "name": "action",
          "qname": "package_parser.commands.get_api._model.ParameterIsIgnored.__init__.action",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, action: str) -> None:\n        super().__init__(action)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIllegal/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.ParameterIsIllegal.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIllegal/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.ParameterIsIllegal.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsIllegal/__init__/action",
          "name": "action",
          "qname": "package_parser.commands.get_api._model.ParameterIsIllegal.__init__.action",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, action: str) -> None:\n        super().__init__(action)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsNone/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.ParameterIsNone.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsNone/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.ParameterIsNone.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/ParameterIsNone/__init__/condition",
          "name": "condition",
          "qname": "package_parser.commands.get_api._model.ParameterIsNone.__init__.condition",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, condition: str) -> None:\n        super().__init__(condition)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.RefinedType.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.RefinedType.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/__init__/ref_type",
          "name": "ref_type",
          "qname": "package_parser.commands.get_api._model.RefinedType.__init__.ref_type",
          "default_value": "None",
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(\n        self,\n        ref_type: Union[UnionType, BoundaryType, EnumType, NamedType, None] = None,\n    ) -> None:\n        self.ref_type = ref_type"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/as_dict",
      "name": "as_dict",
      "qname": "package_parser.commands.get_api._model.RefinedType.as_dict",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/as_dict/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.RefinedType.as_dict.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def as_dict(self):\n        if self.ref_type is not None:\n            return {\"kind\": self.ref_type.__class__.__name__, **asdict(self.ref_type)}\n        return {}"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/from_docstring",
      "name": "from_docstring",
      "qname": "package_parser.commands.get_api._model.RefinedType.from_docstring",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/from_docstring/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._model.RefinedType.from_docstring.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RefinedType/from_docstring/docstring",
          "name": "docstring",
          "qname": "package_parser.commands.get_api._model.RefinedType.from_docstring.docstring",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_docstring(cls, docstring: ParameterAndResultDocstring) -> RefinedType:\n        docstring_str = \" \".join([docstring.type, docstring.description])\n        enum = EnumType.from_string(docstring_str)\n        boundary = BoundaryType.from_string(docstring_str)\n\n        if enum is not None and boundary is not None:\n            union = UnionType()\n            union.types.add(enum)\n            union.types.add(boundary)\n            return RefinedType(union)\n\n        if enum is not None:\n            return RefinedType(enum)\n\n        if boundary is not None:\n            return RefinedType(boundary)\n\n        return RefinedType()"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Result/from_json",
      "name": "from_json",
      "qname": "package_parser.commands.get_api._model.Result.from_json",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Result/from_json/json",
          "name": "json",
          "qname": "package_parser.commands.get_api._model.Result.from_json.json",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def from_json(json: Any) -> Result:\n        return Result(\n            json[\"name\"], ParameterAndResultDocstring.from_json(json[\"docstring\"])\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/Result/to_json",
      "name": "to_json",
      "qname": "package_parser.commands.get_api._model.Result.to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/Result/to_json/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.Result.to_json.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def to_json(self) -> Any:\n        return {\"name\": self.name, \"docstring\": self.docstring.to_json()}"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RuntimeAction/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.RuntimeAction.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RuntimeAction/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.RuntimeAction.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RuntimeAction/__init__/action",
          "name": "action",
          "qname": "package_parser.commands.get_api._model.RuntimeAction.__init__.action",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, action: str) -> None:\n        super().__init__(action)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/RuntimeCondition/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.RuntimeCondition.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RuntimeCondition/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.RuntimeCondition.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/RuntimeCondition/__init__/condition",
          "name": "condition",
          "qname": "package_parser.commands.get_api._model.RuntimeCondition.__init__.condition",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, condition: str) -> None:\n        super().__init__(condition)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/StaticAction/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.StaticAction.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/StaticAction/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.StaticAction.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/StaticAction/__init__/action",
          "name": "action",
          "qname": "package_parser.commands.get_api._model.StaticAction.__init__.action",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, action: str) -> None:\n        super().__init__(action)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._model/StaticCondition/__init__",
      "name": "__init__",
      "qname": "package_parser.commands.get_api._model.StaticCondition.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._model/StaticCondition/__init__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._model.StaticCondition.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._model/StaticCondition/__init__/condition",
          "name": "condition",
          "qname": "package_parser.commands.get_api._model.StaticCondition.__init__.condition",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __init__(self, condition: str) -> None:\n        super().__init__(condition)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._package_metadata/__move_init_files_to_front",
      "name": "__move_init_files_to_front",
      "qname": "package_parser.commands.get_api._package_metadata.__move_init_files_to_front",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._package_metadata/__move_init_files_to_front/files",
          "name": "files",
          "qname": "package_parser.commands.get_api._package_metadata.__move_init_files_to_front.files",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __move_init_files_to_front(files: list[str]) -> list[str]:\n    init_files = []\n    other_files = []\n\n    for file in files:\n        if _is_init_file(file):\n            init_files.append(file)\n        else:\n            other_files.append(file)\n\n    return init_files + other_files"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._package_metadata/distribution",
      "name": "distribution",
      "qname": "package_parser.commands.get_api._package_metadata.distribution",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._package_metadata/distribution/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.get_api._package_metadata.distribution.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def distribution(package_name: str) -> Optional[str]:\n    dist = packages_distributions().get(package_name)\n    if dist is None or len(dist) == 0:\n        return None\n\n    return dist[0]"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._package_metadata/distribution_version",
      "name": "distribution_version",
      "qname": "package_parser.commands.get_api._package_metadata.distribution_version",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._package_metadata/distribution_version/dist",
          "name": "dist",
          "qname": "package_parser.commands.get_api._package_metadata.distribution_version.dist",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def distribution_version(dist: Optional[str]) -> Optional[str]:\n    if dist is None:\n        return None\n\n    return version(dist)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._package_metadata/package_files",
      "name": "package_files",
      "qname": "package_parser.commands.get_api._package_metadata.package_files",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._package_metadata/package_files/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.get_api._package_metadata.package_files.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def package_files(package_name: str) -> list[str]:\n    root = package_root(package_name)\n    files = list_files(root, \".py\")\n    return __move_init_files_to_front(files)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._package_metadata/package_root",
      "name": "package_root",
      "qname": "package_parser.commands.get_api._package_metadata.package_root",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._package_metadata/package_root/package_name",
          "name": "package_name",
          "qname": "package_parser.commands.get_api._package_metadata.package_root.package_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def package_root(package_name: str) -> Path:\n    path_as_string = importlib.import_module(package_name).__file__\n    if path_as_string is None:\n        raise AssertionError(f\"Cannot find package root for '{path_as_string}'.\")\n    return Path(path_as_string).parent"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/__eq__",
      "name": "__eq__",
      "qname": "package_parser.commands.get_api._refined_types.BoundaryType.__eq__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/__eq__/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._refined_types.BoundaryType.__eq__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/__eq__/__o",
          "name": "__o",
          "qname": "package_parser.commands.get_api._refined_types.BoundaryType.__eq__.__o",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __eq__(self, __o: object) -> bool:\n        if isinstance(__o, BoundaryType):\n            eq = (\n                self.base_type == __o.base_type\n                and self.min == __o.min\n                and self.min_inclusive == __o.min_inclusive\n                and self.max == __o.max\n            )\n            if eq:\n                if self.max == BoundaryType.INFINITY:\n                    return True\n                else:\n                    return self.max_inclusive == __o.max_inclusive\n            else:\n                return False\n        else:\n            return False"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/_is_inclusive",
      "name": "_is_inclusive",
      "qname": "package_parser.commands.get_api._refined_types.BoundaryType._is_inclusive",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/_is_inclusive/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._refined_types.BoundaryType._is_inclusive.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/_is_inclusive/bracket",
          "name": "bracket",
          "qname": "package_parser.commands.get_api._refined_types.BoundaryType._is_inclusive.bracket",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def _is_inclusive(cls, bracket: str) -> bool:\n        if bracket == \"(\" or bracket == \")\":\n            return False\n        elif bracket == \"[\" or bracket == \"]\":\n            return True\n        else:\n            raise Exception(f\"{bracket} is not one of []()\")"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/from_string",
      "name": "from_string",
      "qname": "package_parser.commands.get_api._refined_types.BoundaryType.from_string",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/from_string/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._refined_types.BoundaryType.from_string.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/BoundaryType/from_string/string",
          "name": "string",
          "qname": "package_parser.commands.get_api._refined_types.BoundaryType.from_string.string",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_string(cls, string: str) -> Optional[BoundaryType]:\n        pattern = r\"\"\"(?P<base_type>float|int)?[ ]  # optional base type of either float or int\n                    (in|of)[ ](the[ ])?(range|interval)[ ](of[ ])?  # 'in' or 'of', optional 'the', 'range' or 'interval', optional 'of'\n                    `?(?P<min_bracket>\\[|\\()(?P<min>\\d+.?\\d*),[ ]  # left side of the range\n                    (?P<max>\\d+.?\\d*|infinity)(?P<max_bracket>\\]|\\))`?\"\"\"  # right side of the range\n        match = re.search(pattern, string, re.VERBOSE)\n\n        if match is not None:\n            base_type = match.group(\"base_type\")\n            if base_type is None:\n                base_type = \"float\"\n            base_type = eval(base_type)\n\n            min_value = base_type(match.group(\"min\"))\n            max_value = match.group(\"max\")\n            if max_value != \"infinity\":\n                max_value = base_type(max_value)\n            else:\n                max_value = BoundaryType.INFINITY\n            min_bracket = match.group(\"min_bracket\")\n            max_bracket = match.group(\"max_bracket\")\n            min_inclusive = BoundaryType._is_inclusive(min_bracket)\n            max_inclusive = BoundaryType._is_inclusive(max_bracket)\n\n            return BoundaryType(\n                base_type.__name__, min_value, max_value, min_inclusive, max_inclusive\n            )\n\n        return None"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType/from_string",
      "name": "from_string",
      "qname": "package_parser.commands.get_api._refined_types.EnumType.from_string",
      "decorators": [
        "classmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType/from_string/cls",
          "name": "cls",
          "qname": "package_parser.commands.get_api._refined_types.EnumType.from_string.cls",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType/from_string/string",
          "name": "string",
          "qname": "package_parser.commands.get_api._refined_types.EnumType.from_string.string",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @classmethod\n    def from_string(cls, string: str) -> Optional[EnumType]:\n        def remove_backslash(e: str):\n            e = e.replace(r\"\\\"\", '\"')\n            e = e.replace(r\"\\'\", \"'\")\n            return e\n\n        enum_match = re.search(r\"{(.*?)}\", string)\n        if enum_match:\n            quotes = \"'\\\"\"\n            values = set()\n            enum_str = enum_match.group(1)\n            value = \"\"\n            inside_value = False\n            curr_quote = None\n            for i, char in enumerate(enum_str):\n                if char in quotes and (i == 0 or (i > 0 and enum_str[i - 1] != \"\\\\\")):\n                    if inside_value == False:\n                        inside_value = True\n                        curr_quote = char\n                    elif inside_value == True:\n                        if curr_quote == char:\n                            inside_value = False\n                            curr_quote = None\n                            values.add(remove_backslash(value))\n                            value = \"\"\n                        else:\n                            value += char\n                elif inside_value:\n                    value += char\n\n            return EnumType(values)\n\n        return None"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType/update",
      "name": "update",
      "qname": "package_parser.commands.get_api._refined_types.EnumType.update",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType/update/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._refined_types.EnumType.update.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/EnumType/update/enum",
          "name": "enum",
          "qname": "package_parser.commands.get_api._refined_types.EnumType.update.enum",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def update(self, enum: EnumType):\n        self.values.update(enum.values)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_api._refined_types/NamedType/from_string",
      "name": "from_string",
      "qname": "package_parser.commands.get_api._refined_types.NamedType.from_string",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/NamedType/from_string/self",
          "name": "self",
          "qname": "package_parser.commands.get_api._refined_types.NamedType.from_string.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_api._refined_types/NamedType/from_string/string",
          "name": "string",
          "qname": "package_parser.commands.get_api._refined_types.NamedType.from_string.string",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def from_string(self, string: str) -> set[NamedType]:\n        pass"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor/extract_pattern_parameter_adverbial_clause",
      "name": "extract_pattern_parameter_adverbial_clause",
      "qname": "package_parser.commands.get_dependencies._get_dependency.DependencyExtractor.extract_pattern_parameter_adverbial_clause",
      "decorators": [
        "staticmethod"
      ],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor/extract_pattern_parameter_adverbial_clause/dependent_param",
          "name": "dependent_param",
          "qname": "package_parser.commands.get_dependencies._get_dependency.DependencyExtractor.extract_pattern_parameter_adverbial_clause.dependent_param",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor/extract_pattern_parameter_adverbial_clause/func_parameters",
          "name": "func_parameters",
          "qname": "package_parser.commands.get_dependencies._get_dependency.DependencyExtractor.extract_pattern_parameter_adverbial_clause.func_parameters",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor/extract_pattern_parameter_adverbial_clause/match",
          "name": "match",
          "qname": "package_parser.commands.get_dependencies._get_dependency.DependencyExtractor.extract_pattern_parameter_adverbial_clause.match",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/DependencyExtractor/extract_pattern_parameter_adverbial_clause/param_docstring",
          "name": "param_docstring",
          "qname": "package_parser.commands.get_dependencies._get_dependency.DependencyExtractor.extract_pattern_parameter_adverbial_clause.param_docstring",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    @staticmethod\n    def extract_pattern_parameter_adverbial_clause(\n        dependent_param: Parameter,\n        func_parameters: List[Parameter],\n        match: Tuple,\n        param_docstring: Doc,\n    ) -> Union[Dependency, None]:\n        is_depending_on_param_index = match[1][2]\n        is_depending_on_param_name = param_docstring[is_depending_on_param_index].text\n        is_depending_on_param = next(\n            filter(\n                lambda param: param.name == is_depending_on_param_name, func_parameters\n            ),\n            None,\n        )\n        if is_depending_on_param is None:\n            # Likely not a correct dependency match\n            return None\n\n        condition_token = param_docstring[match[1][1]]\n        condition = extract_condition(condition_token)\n\n        action_token = param_docstring[match[1][0]]\n        action = extract_action(action_token, condition_token)\n\n        return Dependency(\n            hasDependentParameter=dependent_param,\n            isDependingOn=is_depending_on_param,\n            hasCondition=condition,\n            hasAction=action,\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_action",
      "name": "extract_action",
      "qname": "package_parser.commands.get_dependencies._get_dependency.extract_action",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_action/action_token",
          "name": "action_token",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_action.action_token",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_action/condition_token",
          "name": "condition_token",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_action.condition_token",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Create action object given head token of action phrase in docstring.\nCondition token used to avoid traversing into the condition phrase dependency subtree of the docstring.",
      "docstring": "Create action object given head token of action phrase in docstring.\nCondition token used to avoid traversing into the condition phrase dependency subtree of the docstring.",
      "code": "def extract_action(action_token: Token, condition_token: Token) -> Action:\n    \"\"\"\n    Create action object given head token of action phrase in docstring.\n    Condition token used to avoid traversing into the condition phrase dependency subtree of the docstring.\n    \"\"\"\n    action_tokens = []\n    action_lefts = list(action_token.lefts)\n    action_rights = list(action_token.rights)\n\n    for token in action_lefts:\n        if token != condition_token:\n            action_tokens.extend(extract_lefts_and_rights(token))\n    action_tokens.append(action_token.text)\n    for token in action_rights:\n        if token != condition_token:\n            action_tokens.extend(extract_lefts_and_rights(token))\n\n    # Remove trailing punctuation\n    if any(p == action_tokens[-1] for p in [\",\", \".\"]):\n        del action_tokens[-1]\n    action_text = \" \".join(action_tokens)\n\n    ignored_phrases = [\n        \"ignored\",\n        \"not used\",\n        \"no impact\",\n        \"only supported\",\n        \"only applies\",\n    ]\n    illegal_phrases = [\"raise\", \"exception\", \"must be\", \"must not be\"]\n    if any(phrase in action_text.lower() for phrase in ignored_phrases):\n        return ParameterIsIgnored(action=action_text)\n    elif any(phrase in action_text.lower() for phrase in illegal_phrases):\n        return ParameterIsIllegal(action=action_text)\n    else:\n        return Action(action=action_text)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_condition",
      "name": "extract_condition",
      "qname": "package_parser.commands.get_dependencies._get_dependency.extract_condition",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_condition/condition_token",
          "name": "condition_token",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_condition.condition_token",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Create condition object given head token of condition phrase in docstring.",
      "docstring": "Create condition object given head token of condition phrase in docstring.",
      "code": "def extract_condition(condition_token: Token) -> Condition:\n    \"\"\"\n    Create condition object given head token of condition phrase in docstring.\n    \"\"\"\n    condition_token_subtree = list(condition_token.subtree)\n    condition_text = \" \".join([token.text for token in condition_token_subtree])\n\n    is_none_phrases = [\n        \"is none\",\n        \"is also none\" \"is not set\",\n        \"is not specified\",\n        \"is not none\",\n        \"if none\",\n        \"if not none\",\n    ]\n    has_value_phrases = [\n        \"equals\",\n        \"is true\",\n        \"is false\",\n        \"is set to\",\n        \"is greater than\",\n        \"is less than\",\n    ]\n    if any(phrase in condition_text.lower() for phrase in is_none_phrases):\n        return ParameterIsNone(condition=condition_text)\n    elif any(phrase in condition_text.lower() for phrase in has_value_phrases):\n        return ParameterHasValue(condition=condition_text)\n    else:\n        return Condition(condition=condition_text)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring",
      "name": "extract_dependencies_from_docstring",
      "qname": "package_parser.commands.get_dependencies._get_dependency.extract_dependencies_from_docstring",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring/parameter",
          "name": "parameter",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_dependencies_from_docstring.parameter",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring/func_parameters",
          "name": "func_parameters",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_dependencies_from_docstring.func_parameters",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring/param_docstring",
          "name": "param_docstring",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_dependencies_from_docstring.param_docstring",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring/matches",
          "name": "matches",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_dependencies_from_docstring.matches",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_dependencies_from_docstring/spacy_id_to_pattern_id_mapping",
          "name": "spacy_id_to_pattern_id_mapping",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_dependencies_from_docstring.spacy_id_to_pattern_id_mapping",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Extract readable dependencies in a Docstring from pattern matches.\nFunction fetched from class DependencyExtractor, when 'extract_' + pattern name match function name in the class.",
      "docstring": "Extract readable dependencies in a Docstring from pattern matches.\nFunction fetched from class DependencyExtractor, when 'extract_' + pattern name match function name in the class.",
      "code": "def extract_dependencies_from_docstring(\n    parameter: Parameter,\n    func_parameters: List[Parameter],\n    param_docstring: Span,\n    matches: List,\n    spacy_id_to_pattern_id_mapping: Dict,\n) -> List[Dependency]:\n    \"\"\"\n    Extract readable dependencies in a Docstring from pattern matches.\n    Function fetched from class DependencyExtractor, when 'extract_' + pattern name match function name in the class.\n    \"\"\"\n    dependencies = list()\n    for match in matches:\n        pattern_id = spacy_id_to_pattern_id_mapping[match[0]]\n        extract_dependency_method = getattr(\n            DependencyExtractor, f\"extract_{pattern_id}\"\n        )\n        dependency = extract_dependency_method(\n            parameter, func_parameters, match, param_docstring\n        )\n        if dependency is not None:\n            dependencies.append(dependency)\n    return dependencies"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_lefts_and_rights",
      "name": "extract_lefts_and_rights",
      "qname": "package_parser.commands.get_dependencies._get_dependency.extract_lefts_and_rights",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_lefts_and_rights/curr_token",
          "name": "curr_token",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_lefts_and_rights.curr_token",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/extract_lefts_and_rights/extracted",
          "name": "extracted",
          "qname": "package_parser.commands.get_dependencies._get_dependency.extract_lefts_and_rights.extracted",
          "default_value": "None",
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Given a spaCy token, extract recursively all tokens in its dependency subtree in inorder traversal.",
      "docstring": "Given a spaCy token, extract recursively all tokens in its dependency subtree in inorder traversal.",
      "code": "def extract_lefts_and_rights(curr_token: Token, extracted: Union[List, None] = None):\n    \"\"\"\n    Given a spaCy token, extract recursively all tokens in its dependency subtree in inorder traversal.\n    \"\"\"\n    if extracted is None:\n        extracted = []\n\n    token_lefts = list(curr_token.lefts)\n    for token in token_lefts:\n        extract_lefts_and_rights(token, extracted)\n\n    extracted.append(curr_token.text)\n\n    token_rights = list(curr_token.rights)\n    for token in token_rights:\n        extract_lefts_and_rights(token, extracted)\n\n    return extracted"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/get_dependencies",
      "name": "get_dependencies",
      "qname": "package_parser.commands.get_dependencies._get_dependency.get_dependencies",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._get_dependency/get_dependencies/api",
          "name": "api",
          "qname": "package_parser.commands.get_dependencies._get_dependency.get_dependencies.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Loop through all functions in the API\nParse and preprocess each doc string from every function\nExtract and return all dependencies as a dict with function and parameter names as keys",
      "docstring": "Loop through all functions in the API\nParse and preprocess each doc string from every function\nExtract and return all dependencies as a dict with function and parameter names as keys",
      "code": "def get_dependencies(api: API) -> APIDependencies:\n    \"\"\"\n    Loop through all functions in the API\n    Parse and preprocess each doc string from every function\n    Extract and return all dependencies as a dict with function and parameter names as keys\n    \"\"\"\n    nlp = spacy.load(PIPELINE)\n\n    matcher = DependencyMatcher(nlp.vocab)\n    spacy_id_to_pattern_id_mapping: Dict = dict()\n    for pattern_id, pattern in dependency_matcher_patterns.items():\n        matcher.add(pattern_id, [pattern])\n        spacy_id_to_pattern_id_mapping[nlp.vocab.strings[pattern_id]] = pattern_id\n    all_dependencies: Dict = dict()\n    endpoint_functions = api.functions\n\n    for function_name, function in endpoint_functions.items():\n        parameters = function.parameters\n        all_dependencies[function_name] = {}\n        for parameter in parameters:\n            docstring = parameter.docstring.description\n            docstring_preprocessed = preprocess_docstring(docstring)\n            doc = nlp(docstring_preprocessed)\n            param_dependencies = []\n            for sentence in doc.sents:\n                sentence_dependency_matches = matcher(sentence)\n                sentence_dependencies = extract_dependencies_from_docstring(\n                    parameter,\n                    parameters,\n                    sentence,\n                    sentence_dependency_matches,\n                    spacy_id_to_pattern_id_mapping,\n                )\n                if sentence_dependencies:\n                    param_dependencies.extend(sentence_dependencies)\n            if param_dependencies:\n                all_dependencies[function_name][parameter.name] = param_dependencies\n\n    return APIDependencies(dependencies=all_dependencies)"
    },
    {
      "id": "packager-parser/package_parser.commands.get_dependencies._preprocess_docstring/preprocess_docstring",
      "name": "preprocess_docstring",
      "qname": "package_parser.commands.get_dependencies._preprocess_docstring.preprocess_docstring",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.get_dependencies._preprocess_docstring/preprocess_docstring/docstring",
          "name": "docstring",
          "qname": "package_parser.commands.get_dependencies._preprocess_docstring.preprocess_docstring.docstring",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "1. Remove cluttered punctuation around parameter references\n2. Set '=', ==' to 'equals' and set '!=' to 'does not equal'\n3. Handle cases of step two where the signs are not separate tokens, e.g. \"a=b\".\nNote ordered dict since \"=\" is a substring of the other symbols.",
      "docstring": "1. Remove cluttered punctuation around parameter references\n2. Set '=', ==' to 'equals' and set '!=' to 'does not equal'\n3. Handle cases of step two where the signs are not separate tokens, e.g. \"a=b\".\nNote ordered dict since \"=\" is a substring of the other symbols.",
      "code": "def preprocess_docstring(docstring: str) -> str:\n    \"\"\"\n    1. Remove cluttered punctuation around parameter references\n    2. Set '=', ==' to 'equals' and set '!=' to 'does not equal'\n    3. Handle cases of step two where the signs are not separate tokens, e.g. \"a=b\".\n    Note ordered dict since \"=\" is a substring of the other symbols.\n    \"\"\"\n\n    docstring = re.sub(r'[\"\u201c\u201d`]', \"\", docstring)\n    docstring = re.sub(r\"'\", \"\", docstring)\n    docstring = re.sub(r\"!=\", \" does not equal \", docstring)\n    docstring = re.sub(r\"==?\", \" equals \", docstring)\n    docstring = re.sub(r\"\\s+\", \" \", docstring)\n\n    return docstring"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_implicit_usages_of_default_value",
      "name": "__add_implicit_usages_of_default_value",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__add_implicit_usages_of_default_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_implicit_usages_of_default_value/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__add_implicit_usages_of_default_value.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_implicit_usages_of_default_value/api",
          "name": "api",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__add_implicit_usages_of_default_value.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __add_implicit_usages_of_default_value(usages: UsageStore, api: API) -> None:\n    for parameter_qname, parameter_usage_list in list(usages.parameter_usages.items()):\n        default_value = api.get_default_value(parameter_qname)\n        if default_value is None:\n            continue\n\n        function_qname = parent_qname(parameter_qname)\n        function_usage_list = usages.function_usages[function_qname]\n\n        locations_of_implicit_usages_of_default_value = set(\n            [it.location for it in function_usage_list]\n        ) - set([it.location for it in parameter_usage_list])\n\n        for location in locations_of_implicit_usages_of_default_value:\n            usages.add_value_usage(parameter_qname, default_value, location)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_unused_api_elements",
      "name": "__add_unused_api_elements",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__add_unused_api_elements",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_unused_api_elements/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__add_unused_api_elements.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__add_unused_api_elements/api",
          "name": "api",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__add_unused_api_elements.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __add_unused_api_elements(usages: UsageStore, api: API) -> None:\n    # Public classes\n    for class_qname in api.classes:\n        if api.is_public_class(class_qname):\n            usages.init_class(class_qname)\n\n    # Public functions\n    for function in api.functions.values():\n        if api.is_public_function(function.qname):\n            usages.init_function(function.qname)\n\n            # \"Public\" parameters\n            for parameter in function.parameters:\n                parameter_qname = f\"{function.qname}.{parameter.name}\"\n                usages.init_parameter(parameter_qname)\n                usages.init_value(parameter_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__api_size_to_json",
      "name": "__api_size_to_json",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__api_size_to_json",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__api_size_to_json/n_classes",
          "name": "n_classes",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__api_size_to_json.n_classes",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__api_size_to_json/n_functions",
          "name": "n_functions",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__api_size_to_json.n_functions",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__api_size_to_json/n_parameters",
          "name": "n_parameters",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__api_size_to_json.n_parameters",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __api_size_to_json(n_classes: int, n_functions: int, n_parameters: int) -> Any:\n    return {\n        \"n_classes\": n_classes,\n        \"n_functions\": n_functions,\n        \"n_parameters\": n_parameters,\n    }"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_class_or_function_usage_distribution",
      "name": "__create_class_or_function_usage_distribution",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_class_or_function_usage_distribution",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_class_or_function_usage_distribution/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_class_or_function_usage_distribution.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Creates a dictionary X -> N where N indicates the number of classes/functions that are used at most X times.\n\n:param usages: Usages of classes/functions.\n:return: The usage distribution.",
      "docstring": "Creates a dictionary X -> N where N indicates the number of classes/functions that are used at most X times.\n\n:param usages: Usages of classes/functions.\n:return: The usage distribution.",
      "code": "def __create_class_or_function_usage_distribution(\n    usages: Union[dict[str, list[ClassUsage]], dict[str, list[FunctionUsage]]]\n) -> dict[int, int]:\n    \"\"\"\n    Creates a dictionary X -> N where N indicates the number of classes/functions that are used at most X times.\n\n    :param usages: Usages of classes/functions.\n    :return: The usage distribution.\n    \"\"\"\n\n    result = {}\n\n    max_usages = max(len(it) for it in usages.values())\n    for i in range(max_usages + 1):\n        result[i] = len([it for it in usages.values() if len(it) >= i])\n\n    return result"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_parameter_usage_distribution",
      "name": "__create_parameter_usage_distribution",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_parameter_usage_distribution",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_parameter_usage_distribution/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_parameter_usage_distribution.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Creates a dictionary X -> N where N indicates the number of parameters that are set at most X times to a value other\nthan the most commonly used value (which might differ from the default value).\n\n:param usages: Usage store.\n:return: The usage distribution.",
      "docstring": "Creates a dictionary X -> N where N indicates the number of parameters that are set at most X times to a value other\nthan the most commonly used value (which might differ from the default value).\n\n:param usages: Usage store.\n:return: The usage distribution.",
      "code": "def __create_parameter_usage_distribution(usages: UsageStore) -> dict[int, int]:\n    \"\"\"\n    Creates a dictionary X -> N where N indicates the number of parameters that are set at most X times to a value other\n    than the most commonly used value (which might differ from the default value).\n\n    :param usages: Usage store.\n    :return: The usage distribution.\n    \"\"\"\n\n    result = {}\n\n    function_usages = usages.function_usages\n    parameter_usages = usages.parameter_usages\n    value_usages = usages.value_usages\n\n    max_usages = max(\n        __n_not_set_to_most_common_value(it, function_usages, value_usages)\n        for it in parameter_usages.keys()\n    )\n\n    for i in range(max_usages + 1):\n        result[i] = len(\n            [\n                it\n                for it in parameter_usages.keys()\n                if usages.n_function_usages(parent_qname(it)) >= i\n                and (\n                    parent_qname(parent_qname(it)) not in usages.class_usages\n                    or usages.n_class_usages(parent_qname(parent_qname(it))) >= i\n                )\n                and __n_not_set_to_most_common_value(it, function_usages, value_usages)\n                >= i\n            ]\n        )\n\n    return result"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_usage_distributions",
      "name": "__create_usage_distributions",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_usage_distributions",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_usage_distributions/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_usage_distributions.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_usage_distributions/out_dir",
          "name": "out_dir",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_usage_distributions.out_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__create_usage_distributions/base_file_name",
          "name": "base_file_name",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__create_usage_distributions.base_file_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __create_usage_distributions(\n    usages: UsageStore, out_dir: Path, base_file_name: str\n) -> None:\n    class_usage_distribution = __create_class_or_function_usage_distribution(\n        usages.class_usages\n    )\n    with out_dir.joinpath(f\"{base_file_name}__class_usage_distribution.json\").open(\n        \"w\"\n    ) as f:\n        json.dump(class_usage_distribution, f, indent=2)\n\n    function_usage_distribution = __create_class_or_function_usage_distribution(\n        usages.function_usages\n    )\n    with out_dir.joinpath(f\"{base_file_name}__function_usage_distribution.json\").open(\n        \"w\"\n    ) as f:\n        json.dump(function_usage_distribution, f, indent=2)\n\n    parameter_usage_distribution = __create_parameter_usage_distribution(usages)\n    with out_dir.joinpath(f\"{base_file_name}__parameter_usage_distribution.json\").open(\n        \"w\"\n    ) as f:\n        json.dump(parameter_usage_distribution, f, indent=2)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__n_not_set_to_most_common_value",
      "name": "__n_not_set_to_most_common_value",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__n_not_set_to_most_common_value",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__n_not_set_to_most_common_value/parameter_qname",
          "name": "parameter_qname",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__n_not_set_to_most_common_value.parameter_qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__n_not_set_to_most_common_value/function_usages",
          "name": "function_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__n_not_set_to_most_common_value.function_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__n_not_set_to_most_common_value/value_usages",
          "name": "value_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__n_not_set_to_most_common_value.value_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Counts how often a parameter is set to a value other than the most commonly used value.",
      "docstring": "Counts how often a parameter is set to a value other than the most commonly used value.",
      "code": "def __n_not_set_to_most_common_value(\n    parameter_qname: str,\n    function_usages: dict[str, list[FunctionUsage]],\n    value_usages: dict[str, dict[str, list[ValueUsage]]],\n) -> int:\n    \"\"\"Counts how often a parameter is set to a value other than the most commonly used value.\"\"\"\n\n    n_total_usage = len(function_usages[parent_qname(parameter_qname)])\n\n    # Parameter is unused\n    # Checking both conditions even though one implies the other to ensure correctness of the program\n    if n_total_usage == 0 and len(value_usages[parameter_qname].values()) == 0:\n        return 0\n\n    n_set_to_most_commonly_used_value = max(\n        len(it) for it in value_usages[parameter_qname].values()\n    )\n\n    return n_total_usage - n_set_to_most_commonly_used_value"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__optional_vs_required_parameters",
      "name": "__optional_vs_required_parameters",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__optional_vs_required_parameters",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__optional_vs_required_parameters/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__optional_vs_required_parameters.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__optional_vs_required_parameters/public_api",
          "name": "public_api",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__optional_vs_required_parameters.public_api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__optional_vs_required_parameters/out_dir",
          "name": "out_dir",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__optional_vs_required_parameters.out_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__optional_vs_required_parameters/base_file_name",
          "name": "base_file_name",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__optional_vs_required_parameters.base_file_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __optional_vs_required_parameters(\n    usages: UsageStore, public_api: API, out_dir: Path, base_file_name: str\n) -> None:\n    # TODO: Determine whether parameter should be constant (already removed)/required/optional based on entropy\n    # TODO: Use must commonly set value as default\n\n    pass"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__preprocess_usages",
      "name": "__preprocess_usages",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__preprocess_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__preprocess_usages/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__preprocess_usages.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__preprocess_usages/api",
          "name": "api",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__preprocess_usages.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __preprocess_usages(usages: UsageStore, api: API) -> None:\n    __remove_internal_usages(usages, api)\n    __add_unused_api_elements(usages, api)\n    __add_implicit_usages_of_default_value(usages, api)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__print_usage_counts",
      "name": "__print_usage_counts",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__print_usage_counts",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__print_usage_counts/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__print_usage_counts.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__print_usage_counts/out_dir",
          "name": "out_dir",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__print_usage_counts.out_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__print_usage_counts/base_file_name",
          "name": "base_file_name",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__print_usage_counts.base_file_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __print_usage_counts(usages, out_dir, base_file_name):\n    out_file = out_dir.joinpath(f\"{base_file_name}__usage_counts.json\")\n    ensure_file_exists(out_file)\n    with out_file.open(\"w\") as f:\n        json.dump(usages.to_count_json(), f, indent=2)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_internal_usages",
      "name": "__remove_internal_usages",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_internal_usages",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_internal_usages/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_internal_usages.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_internal_usages/api",
          "name": "api",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_internal_usages.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Removes usages of internal parts of the API. It might incorrectly remove some calls to methods that are inherited\nfrom internal classes into a public class but these are just fit/predict/etc., i.e. something we want to keep\nunchanged anyway.\n\n:param usages: Usage store\n:param api: Description of the API",
      "docstring": "Removes usages of internal parts of the API. It might incorrectly remove some calls to methods that are inherited\nfrom internal classes into a public class but these are just fit/predict/etc., i.e. something we want to keep\nunchanged anyway.\n\n:param usages: Usage store\n:param api: Description of the API",
      "code": "def __remove_internal_usages(usages: UsageStore, api: API) -> None:\n    \"\"\"\n    Removes usages of internal parts of the API. It might incorrectly remove some calls to methods that are inherited\n    from internal classes into a public class but these are just fit/predict/etc., i.e. something we want to keep\n    unchanged anyway.\n\n    :param usages: Usage store\n    :param api: Description of the API\n    \"\"\"\n\n    # Internal classes\n    for class_qname in list(usages.class_usages.keys()):\n        if not api.is_public_class(class_qname):\n            print(f\"Removing usages of internal class {class_qname}\")\n            usages.remove_class(class_qname)\n\n    # Internal functions\n    for function_qname in list(usages.function_usages.keys()):\n        if not api.is_public_function(function_qname):\n            print(f\"Removing usages of internal function {function_qname}\")\n            usages.remove_function(function_qname)\n\n    # Internal parameters\n    parameter_qnames = set(api.parameters().keys())\n\n    for parameter_qname in list(usages.parameter_usages.keys()):\n        function_qname = parent_qname(parameter_qname)\n        if parameter_qname not in parameter_qnames or not api.is_public_function(\n            function_qname\n        ):\n            print(f\"Removing usages of internal parameter {parameter_qname}\")\n            usages.remove_parameter(parameter_qname)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_mostly_useless_parameters",
      "name": "__remove_mostly_useless_parameters",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_mostly_useless_parameters",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_mostly_useless_parameters/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_mostly_useless_parameters.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_mostly_useless_parameters/min_usages",
          "name": "min_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_mostly_useless_parameters.min_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __remove_mostly_useless_parameters(\n    usages: UsageStore, min_usages: int\n) -> list[str]:\n    result = []\n\n    for parameter_qname in list(usages.parameter_usages.keys()):\n        usage_count = __n_not_set_to_most_common_value(\n            parameter_qname, usages.function_usages, usages.value_usages\n        )\n\n        if usage_count < min_usages:\n            result.append(parameter_qname)\n            usages.remove_parameter(parameter_qname)\n\n    return sorted(result)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_api_elements",
      "name": "__remove_rarely_used_api_elements",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_api_elements",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_api_elements/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_api_elements.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_api_elements/min_usages",
          "name": "min_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_api_elements.min_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_api_elements/out_dir",
          "name": "out_dir",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_api_elements.out_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_api_elements/base_file_name",
          "name": "base_file_name",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_api_elements.base_file_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Removes API elements that are used fewer than min_usages times.\n\n:return: The API size after the individual steps.",
      "docstring": "Removes API elements that are used fewer than min_usages times.\n\n:return: The API size after the individual steps.",
      "code": "def __remove_rarely_used_api_elements(\n    usages: UsageStore, min_usages: int, out_dir: Path, base_file_name: str\n) -> dict[str, Any]:\n    \"\"\"\n    Removes API elements that are used fewer than min_usages times.\n\n    :return: The API size after the individual steps.\n    \"\"\"\n\n    rarely_used_classes = __remove_rarely_used_classes(usages, min_usages)\n    api_size_after_unused_class_removal = __api_size_to_json(\n        len(usages.class_usages),\n        len(usages.function_usages),\n        len(usages.parameter_usages),\n    )\n    with out_dir.joinpath(\n        f\"{base_file_name}__classes_used_fewer_than_{min_usages}_times.json\"\n    ).open(\"w\") as f:\n        json.dump(rarely_used_classes, f, indent=2)\n\n    rarely_used_functions = __remove_rarely_used_functions(usages, min_usages)\n    api_size_after_unused_function_removal = __api_size_to_json(\n        len(usages.class_usages),\n        len(usages.function_usages),\n        len(usages.parameter_usages),\n    )\n    with out_dir.joinpath(\n        f\"{base_file_name}__functions_used_fewer_than_{min_usages}_times.json\"\n    ).open(\"w\") as f:\n        json.dump(rarely_used_functions, f, indent=2)\n\n    rarely_used_parameters = __remove_rarely_used_parameters(usages, min_usages)\n    api_size_after_unused_parameter_removal = __api_size_to_json(\n        len(usages.class_usages),\n        len(usages.function_usages),\n        len(usages.parameter_usages),\n    )\n    with out_dir.joinpath(\n        f\"{base_file_name}__parameters_used_fewer_than_{min_usages}_times.json\"\n    ).open(\"w\") as f:\n        json.dump(rarely_used_parameters, f, indent=2)\n\n    mostly_useless_parameters = __remove_mostly_useless_parameters(usages, min_usages)\n    api_size_after_useless_parameter_removal = __api_size_to_json(\n        len(usages.class_usages),\n        len(usages.function_usages),\n        len(usages.parameter_usages),\n    )\n    with out_dir.joinpath(\n        f\"{base_file_name}__parameters_set_fewer_than_{min_usages}_times_to_value_other_than_most_common.json\"\n    ).open(\"w\") as f:\n        json.dump(mostly_useless_parameters, f, indent=2)\n\n    return {\n        \"after_unused_class_removal\": api_size_after_unused_class_removal,\n        \"after_unused_function_removal\": api_size_after_unused_function_removal,\n        \"after_unused_parameter_removal\": api_size_after_unused_parameter_removal,\n        \"after_useless_parameter_removal\": api_size_after_useless_parameter_removal,\n    }"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_classes",
      "name": "__remove_rarely_used_classes",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_classes",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_classes/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_classes.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_classes/min_usages",
          "name": "min_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_classes.min_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __remove_rarely_used_classes(usages: UsageStore, min_usages: int) -> list[str]:\n    result = []\n\n    for class_qname in list(usages.class_usages.keys()):\n        if usages.n_class_usages(class_qname) < min_usages:\n            result.append(class_qname)\n            usages.remove_class(class_qname)\n\n    return sorted(result)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_functions",
      "name": "__remove_rarely_used_functions",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_functions",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_functions/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_functions.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_functions/min_usages",
          "name": "min_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_functions.min_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __remove_rarely_used_functions(usages: UsageStore, min_usages: int) -> list[str]:\n    result = []\n\n    for function_qname in list(usages.function_usages.keys()):\n        if usages.n_function_usages(function_qname) < min_usages:\n            result.append(function_qname)\n            usages.remove_function(function_qname)\n\n    return sorted(result)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_parameters",
      "name": "__remove_rarely_used_parameters",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_parameters",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_parameters/usages",
          "name": "usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_parameters.usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__remove_rarely_used_parameters/min_usages",
          "name": "min_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__remove_rarely_used_parameters.min_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __remove_rarely_used_parameters(usages: UsageStore, min_usages: int) -> list[str]:\n    result = []\n\n    for parameter_qname in list(usages.parameter_usages.keys()):\n        if usages.n_parameter_usages(parameter_qname) < min_usages:\n            result.append(parameter_qname)\n            usages.remove_parameter(parameter_qname)\n\n    return sorted(result)"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__write_api_size",
      "name": "__write_api_size",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__write_api_size",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__write_api_size/api",
          "name": "api",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__write_api_size.api",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__write_api_size/api_size_after_removal",
          "name": "api_size_after_removal",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__write_api_size.api_size_after_removal",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__write_api_size/out_dir",
          "name": "out_dir",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__write_api_size.out_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/__write_api_size/base_file_name",
          "name": "base_file_name",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.__write_api_size.base_file_name",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __write_api_size(\n    api: API, api_size_after_removal: dict[str, Any], out_dir: Path, base_file_name: str\n) -> None:\n    with out_dir.joinpath(f\"{base_file_name}__api_size.json\").open(\"w\") as f:\n        json.dump(\n            {\n                \"full\": __api_size_to_json(\n                    api.class_count(), api.function_count(), api.parameter_count()\n                ),\n                \"public\": __api_size_to_json(\n                    api.public_class_count(),\n                    api.public_function_count(),\n                    api.public_parameter_count(),\n                ),\n                \"after_unused_class_removal\": api_size_after_removal[\n                    \"after_unused_class_removal\"\n                ],\n                \"after_unused_function_removal\": api_size_after_removal[\n                    \"after_unused_function_removal\"\n                ],\n                \"after_unused_parameter_removal\": api_size_after_removal[\n                    \"after_unused_parameter_removal\"\n                ],\n                \"after_useless_parameter_removal\": api_size_after_removal[\n                    \"after_useless_parameter_removal\"\n                ],\n            },\n            f,\n            indent=2,\n        )"
    },
    {
      "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/suggest_improvements",
      "name": "suggest_improvements",
      "qname": "package_parser.commands.suggest_improvements._suggest_improvements.suggest_improvements",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/suggest_improvements/api_file",
          "name": "api_file",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.suggest_improvements.api_file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/suggest_improvements/usages_file",
          "name": "usages_file",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.suggest_improvements.usages_file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/suggest_improvements/out_dir",
          "name": "out_dir",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.suggest_improvements.out_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.commands.suggest_improvements._suggest_improvements/suggest_improvements/min_usages",
          "name": "min_usages",
          "qname": "package_parser.commands.suggest_improvements._suggest_improvements.suggest_improvements.min_usages",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def suggest_improvements(\n    api_file: TextIOWrapper, usages_file: TextIOWrapper, out_dir: Path, min_usages: int\n):\n    with api_file:\n        api_json = json.load(api_file)\n        api = API.from_json(api_json)\n\n    with usages_file:\n        usages_json = json.load(usages_file)\n        usages = UsageStore.from_json(usages_json)\n\n    out_dir.mkdir(parents=True, exist_ok=True)\n    base_file_name = api_file.name.replace(\"__api.json\", \"\")\n\n    __preprocess_usages(usages, api)\n    __print_usage_counts(usages, out_dir, base_file_name)\n    __create_usage_distributions(usages, out_dir, base_file_name)\n    api_size_after_removal = __remove_rarely_used_api_elements(\n        usages, min_usages, out_dir, base_file_name\n    )\n    __write_api_size(api, api_size_after_removal, out_dir, base_file_name)\n    __optional_vs_required_parameters(usages, api, out_dir, base_file_name)"
    },
    {
      "id": "packager-parser/package_parser.main/main",
      "name": "main",
      "qname": "package_parser.main.main",
      "decorators": [],
      "parameters": [],
      "results": [],
      "is_public": true,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def main() -> None:\n    start_time = time.time()\n\n    cli()\n\n    print(\n        \"\\n====================================================================================================\"\n    )\n    print(f\"Program ran in {time.time() - start_time}s\")"
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__enter",
      "name": "__enter",
      "qname": "package_parser.utils._ASTWalker.ASTWalker.__enter",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__enter/self",
          "name": "self",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__enter.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__enter/node",
          "name": "node",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__enter.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __enter(self, node: astroid.NodeNG) -> None:\n        method = self.__get_callbacks(node)[0]\n        if method is not None:\n            method(node)"
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__get_callbacks",
      "name": "__get_callbacks",
      "qname": "package_parser.utils._ASTWalker.ASTWalker.__get_callbacks",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__get_callbacks/self",
          "name": "self",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__get_callbacks.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__get_callbacks/node",
          "name": "node",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__get_callbacks.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __get_callbacks(self, node: astroid.NodeNG) -> _EnterAndLeaveFunctions:\n        klass = node.__class__\n        methods = self._cache.get(klass)\n\n        if methods is None:\n            handler = self._handler\n            class_name = klass.__name__.lower()\n            enter_method = getattr(\n                handler, f\"enter_{class_name}\", getattr(handler, \"enter_default\", None)\n            )\n            leave_method = getattr(\n                handler, f\"leave_{class_name}\", getattr(handler, \"leave_default\", None)\n            )\n            self._cache[klass] = (enter_method, leave_method)\n        else:\n            enter_method, leave_method = methods\n\n        return enter_method, leave_method"
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__init__",
      "name": "__init__",
      "qname": "package_parser.utils._ASTWalker.ASTWalker.__init__",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__init__/self",
          "name": "self",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__init__.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__init__/handler",
          "name": "handler",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__init__.handler",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "A walker visiting a tree in preorder, calling on the handler:\n\n* enter_<class_name> on entering a node, where class name is the class of\nthe node in lower case.\n\n* leave_<class_name> on leaving a node, where class name is the class of\nthe node in lower case.",
      "docstring": "",
      "code": "    def __init__(self, handler: Any) -> None:\n        self._handler = handler\n        self._cache: dict[Type, _EnterAndLeaveFunctions] = {}"
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__leave",
      "name": "__leave",
      "qname": "package_parser.utils._ASTWalker.ASTWalker.__leave",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__leave/self",
          "name": "self",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__leave.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__leave/node",
          "name": "node",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__leave.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __leave(self, node: astroid.NodeNG) -> None:\n        method = self.__get_callbacks(node)[1]\n        if method is not None:\n            method(node)"
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__walk",
      "name": "__walk",
      "qname": "package_parser.utils._ASTWalker.ASTWalker.__walk",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__walk/self",
          "name": "self",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__walk.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__walk/node",
          "name": "node",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__walk.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/__walk/visited_nodes",
          "name": "visited_nodes",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.__walk.visited_nodes",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def __walk(self, node: astroid.NodeNG, visited_nodes: set[astroid.NodeNG]) -> None:\n        if node in visited_nodes:\n            raise AssertionError(\"Node visited twice\")\n        visited_nodes.add(node)\n\n        self.__enter(node)\n        for child_node in node.get_children():\n            self.__walk(child_node, visited_nodes)\n        self.__leave(node)"
    },
    {
      "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/walk",
      "name": "walk",
      "qname": "package_parser.utils._ASTWalker.ASTWalker.walk",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/walk/self",
          "name": "self",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.walk.self",
          "default_value": null,
          "assigned_by": "IMPLICIT",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._ASTWalker/ASTWalker/walk/node",
          "name": "node",
          "qname": "package_parser.utils._ASTWalker.ASTWalker.walk.node",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "    def walk(self, node: astroid.NodeNG) -> None:\n        self.__walk(node, set())"
    },
    {
      "id": "packager-parser/package_parser.utils._files/__read_lines",
      "name": "__read_lines",
      "qname": "package_parser.utils._files.__read_lines",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._files/__read_lines/f",
          "name": "f",
          "qname": "package_parser.utils._files.__read_lines.f",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __read_lines(f: TextIO) -> list[str]:\n    return [it.strip() for it in f.readlines() if it != \"\"]"
    },
    {
      "id": "packager-parser/package_parser.utils._files/__write_lines",
      "name": "__write_lines",
      "qname": "package_parser.utils._files.__write_lines",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._files/__write_lines/f",
          "name": "f",
          "qname": "package_parser.utils._files.__write_lines.f",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._files/__write_lines/lines",
          "name": "lines",
          "qname": "package_parser.utils._files.__write_lines.lines",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def __write_lines(f: TextIO, lines: list[str]) -> None:\n    f.writelines(f\"{it}\\n\" for it in lines)"
    },
    {
      "id": "packager-parser/package_parser.utils._files/ensure_file_exists",
      "name": "ensure_file_exists",
      "qname": "package_parser.utils._files.ensure_file_exists",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._files/ensure_file_exists/file",
          "name": "file",
          "qname": "package_parser.utils._files.ensure_file_exists.file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "Creates a file and all parent directories if they don't exist already.\n\n:param file: The file path.",
      "docstring": "Creates a file and all parent directories if they don't exist already.\n\n:param file: The file path.",
      "code": "def ensure_file_exists(file: Path) -> None:\n    \"\"\"\n    Creates a file and all parent directories if they don't exist already.\n\n    :param file: The file path.\n    \"\"\"\n\n    file.parent.mkdir(parents=True, exist_ok=True)\n    file.touch(exist_ok=True)"
    },
    {
      "id": "packager-parser/package_parser.utils._files/initialize_and_read_exclude_file",
      "name": "initialize_and_read_exclude_file",
      "qname": "package_parser.utils._files.initialize_and_read_exclude_file",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._files/initialize_and_read_exclude_file/exclude_file",
          "name": "exclude_file",
          "qname": "package_parser.utils._files.initialize_and_read_exclude_file.exclude_file",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def initialize_and_read_exclude_file(exclude_file: Path) -> list[str]:\n    exclude_file.parent.mkdir(parents=True, exist_ok=True)\n    try:\n        with exclude_file.open(\"r\") as f:\n            return __read_lines(f)\n    except FileNotFoundError:\n        return []"
    },
    {
      "id": "packager-parser/package_parser.utils._files/list_files",
      "name": "list_files",
      "qname": "package_parser.utils._files.list_files",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._files/list_files/root_dir",
          "name": "root_dir",
          "qname": "package_parser.utils._files.list_files.root_dir",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        },
        {
          "id": "packager-parser/package_parser.utils._files/list_files/extension",
          "name": "extension",
          "qname": "package_parser.utils._files.list_files.extension",
          "default_value": "''",
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": ":param root_dir: The directory containing the files.\n:param extension: The extension the files should have.\n:return: A list with absolute paths to the files.",
      "docstring": ":param root_dir: The directory containing the files.\n:param extension: The extension the files should have.\n:return: A list with absolute paths to the files.",
      "code": "def list_files(root_dir: Path, extension: str = \"\") -> list[str]:\n    \"\"\"\n    :param root_dir: The directory containing the files.\n    :param extension: The extension the files should have.\n    :return: A list with absolute paths to the files.\n    \"\"\"\n\n    result: list[str] = []\n\n    for root, _, files in os.walk(root_dir):\n        for filename in files:\n            if filename.endswith(extension):\n                result.append(str(os.path.join(root, filename)))\n\n    return result"
    },
    {
      "id": "packager-parser/package_parser.utils._qnames/declaration_qname_to_name",
      "name": "declaration_qname_to_name",
      "qname": "package_parser.utils._qnames.declaration_qname_to_name",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._qnames/declaration_qname_to_name/qname",
          "name": "qname",
          "qname": "package_parser.utils._qnames.declaration_qname_to_name.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def declaration_qname_to_name(qname: str) -> str:\n    return qname.split(\".\")[-1]"
    },
    {
      "id": "packager-parser/package_parser.utils._qnames/parent_qname",
      "name": "parent_qname",
      "qname": "package_parser.utils._qnames.parent_qname",
      "decorators": [],
      "parameters": [
        {
          "id": "packager-parser/package_parser.utils._qnames/parent_qname/qname",
          "name": "qname",
          "qname": "package_parser.utils._qnames.parent_qname.qname",
          "default_value": null,
          "assigned_by": "POSITION_OR_NAME",
          "is_public": false,
          "docstring": {
            "type": "",
            "default_value": "",
            "description": ""
          },
          "type": {}
        }
      ],
      "results": [],
      "is_public": false,
      "reexported_by": [],
      "description": "",
      "docstring": "",
      "code": "def parent_qname(qname: str) -> str:\n    return \".\".join(qname.split(\".\")[:-1])"
    }
  ]
}